// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package command

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TThreadDumpType int64

const (
	TThreadDumpType_TARGET  TThreadDumpType = 0
	TThreadDumpType_PENDING TThreadDumpType = 1
)

func (p TThreadDumpType) String() string {
	switch p {
	case TThreadDumpType_TARGET:
		return "TARGET"
	case TThreadDumpType_PENDING:
		return "PENDING"
	}
	return "<UNSET>"
}

func TThreadDumpTypeFromString(s string) (TThreadDumpType, error) {
	switch s {
	case "TARGET":
		return TThreadDumpType_TARGET, nil
	case "PENDING":
		return TThreadDumpType_PENDING, nil
	}
	return TThreadDumpType(0), fmt.Errorf("not a valid TThreadDumpType string")
}

func TThreadDumpTypePtr(v TThreadDumpType) *TThreadDumpType { return &v }

func (p TThreadDumpType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TThreadDumpType) UnmarshalText(text []byte) error {
	q, err := TThreadDumpTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TThreadDumpType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TThreadDumpType(v)
	return nil
}

func (p *TThreadDumpType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TThreadState int64

const (
	TThreadState_NEW           TThreadState = 0
	TThreadState_RUNNABLE      TThreadState = 1
	TThreadState_BLOCKED       TThreadState = 2
	TThreadState_WAITING       TThreadState = 3
	TThreadState_TIMED_WAITING TThreadState = 4
	TThreadState_TERMINATED    TThreadState = 5
	TThreadState_UNKNOWN       TThreadState = 6
)

func (p TThreadState) String() string {
	switch p {
	case TThreadState_NEW:
		return "NEW"
	case TThreadState_RUNNABLE:
		return "RUNNABLE"
	case TThreadState_BLOCKED:
		return "BLOCKED"
	case TThreadState_WAITING:
		return "WAITING"
	case TThreadState_TIMED_WAITING:
		return "TIMED_WAITING"
	case TThreadState_TERMINATED:
		return "TERMINATED"
	case TThreadState_UNKNOWN:
		return "UNKNOWN"
	}
	return "<UNSET>"
}

func TThreadStateFromString(s string) (TThreadState, error) {
	switch s {
	case "NEW":
		return TThreadState_NEW, nil
	case "RUNNABLE":
		return TThreadState_RUNNABLE, nil
	case "BLOCKED":
		return TThreadState_BLOCKED, nil
	case "WAITING":
		return TThreadState_WAITING, nil
	case "TIMED_WAITING":
		return TThreadState_TIMED_WAITING, nil
	case "TERMINATED":
		return TThreadState_TERMINATED, nil
	case "UNKNOWN":
		return TThreadState_UNKNOWN, nil
	}
	return TThreadState(0), fmt.Errorf("not a valid TThreadState string")
}

func TThreadStatePtr(v TThreadState) *TThreadState { return &v }

func (p TThreadState) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TThreadState) UnmarshalText(text []byte) error {
	q, err := TThreadStateFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TThreadState) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TThreadState(v)
	return nil
}

func (p *TThreadState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TRouteResult_ int64

const (
	TRouteResult__OK                     TRouteResult_ = 0
	TRouteResult__BAD_REQUEST            TRouteResult_ = 200
	TRouteResult__EMPTY_REQUEST          TRouteResult_ = 201
	TRouteResult__NOT_SUPPORTED_REQUEST  TRouteResult_ = 202
	TRouteResult__BAD_RESPONSE           TRouteResult_ = 210
	TRouteResult__EMPTY_RESPONSE         TRouteResult_ = 211
	TRouteResult__NOT_SUPPORTED_RESPONSE TRouteResult_ = 212
	TRouteResult__TIMEOUT                TRouteResult_ = 220
	TRouteResult__NOT_FOUND              TRouteResult_ = 230
	TRouteResult__NOT_ACCEPTABLE         TRouteResult_ = 240
	TRouteResult__NOT_SUPPORTED_SERVICE  TRouteResult_ = 241
	TRouteResult__STREAM_CREATE_ERROR    TRouteResult_ = 250
	TRouteResult__UNKNOWN                TRouteResult_ = -1
)

func (p TRouteResult_) String() string {
	switch p {
	case TRouteResult__OK:
		return "OK"
	case TRouteResult__BAD_REQUEST:
		return "BAD_REQUEST"
	case TRouteResult__EMPTY_REQUEST:
		return "EMPTY_REQUEST"
	case TRouteResult__NOT_SUPPORTED_REQUEST:
		return "NOT_SUPPORTED_REQUEST"
	case TRouteResult__BAD_RESPONSE:
		return "BAD_RESPONSE"
	case TRouteResult__EMPTY_RESPONSE:
		return "EMPTY_RESPONSE"
	case TRouteResult__NOT_SUPPORTED_RESPONSE:
		return "NOT_SUPPORTED_RESPONSE"
	case TRouteResult__TIMEOUT:
		return "TIMEOUT"
	case TRouteResult__NOT_FOUND:
		return "NOT_FOUND"
	case TRouteResult__NOT_ACCEPTABLE:
		return "NOT_ACCEPTABLE"
	case TRouteResult__NOT_SUPPORTED_SERVICE:
		return "NOT_SUPPORTED_SERVICE"
	case TRouteResult__STREAM_CREATE_ERROR:
		return "STREAM_CREATE_ERROR"
	case TRouteResult__UNKNOWN:
		return "UNKNOWN"
	}
	return "<UNSET>"
}

func TRouteResult_FromString(s string) (TRouteResult_, error) {
	switch s {
	case "OK":
		return TRouteResult__OK, nil
	case "BAD_REQUEST":
		return TRouteResult__BAD_REQUEST, nil
	case "EMPTY_REQUEST":
		return TRouteResult__EMPTY_REQUEST, nil
	case "NOT_SUPPORTED_REQUEST":
		return TRouteResult__NOT_SUPPORTED_REQUEST, nil
	case "BAD_RESPONSE":
		return TRouteResult__BAD_RESPONSE, nil
	case "EMPTY_RESPONSE":
		return TRouteResult__EMPTY_RESPONSE, nil
	case "NOT_SUPPORTED_RESPONSE":
		return TRouteResult__NOT_SUPPORTED_RESPONSE, nil
	case "TIMEOUT":
		return TRouteResult__TIMEOUT, nil
	case "NOT_FOUND":
		return TRouteResult__NOT_FOUND, nil
	case "NOT_ACCEPTABLE":
		return TRouteResult__NOT_ACCEPTABLE, nil
	case "NOT_SUPPORTED_SERVICE":
		return TRouteResult__NOT_SUPPORTED_SERVICE, nil
	case "STREAM_CREATE_ERROR":
		return TRouteResult__STREAM_CREATE_ERROR, nil
	case "UNKNOWN":
		return TRouteResult__UNKNOWN, nil
	}
	return TRouteResult_(0), fmt.Errorf("not a valid TRouteResult_ string")
}

func TRouteResult_Ptr(v TRouteResult_) *TRouteResult_ { return &v }

func (p TRouteResult_) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TRouteResult_) UnmarshalText(text []byte) error {
	q, err := TRouteResult_FromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TRouteResult_) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TRouteResult_(v)
	return nil
}

func (p *TRouteResult_) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Type
//  - Name
//  - PendingTimeMillis
type TCommandThreadDump struct {
	Type              TThreadDumpType `thrift:"type,1" db:"type" json:"type"`
	Name              *string         `thrift:"name,2" db:"name" json:"name,omitempty"`
	PendingTimeMillis *int64          `thrift:"pendingTimeMillis,3" db:"pendingTimeMillis" json:"pendingTimeMillis,omitempty"`
}

func NewTCommandThreadDump() *TCommandThreadDump {
	return &TCommandThreadDump{
		Type: 0,
	}
}

func (p *TCommandThreadDump) GetType() TThreadDumpType {
	return p.Type
}

var TCommandThreadDump_Name_DEFAULT string

func (p *TCommandThreadDump) GetName() string {
	if !p.IsSetName() {
		return TCommandThreadDump_Name_DEFAULT
	}
	return *p.Name
}

var TCommandThreadDump_PendingTimeMillis_DEFAULT int64

func (p *TCommandThreadDump) GetPendingTimeMillis() int64 {
	if !p.IsSetPendingTimeMillis() {
		return TCommandThreadDump_PendingTimeMillis_DEFAULT
	}
	return *p.PendingTimeMillis
}
func (p *TCommandThreadDump) IsSetName() bool {
	return p.Name != nil
}

func (p *TCommandThreadDump) IsSetPendingTimeMillis() bool {
	return p.PendingTimeMillis != nil
}

func (p *TCommandThreadDump) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCommandThreadDump) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TThreadDumpType(v)
		p.Type = temp
	}
	return nil
}

func (p *TCommandThreadDump) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TCommandThreadDump) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PendingTimeMillis = &v
	}
	return nil
}

func (p *TCommandThreadDump) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCommandThreadDump"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCommandThreadDump) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TCommandThreadDump) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *TCommandThreadDump) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPendingTimeMillis() {
		if err := oprot.WriteFieldBegin("pendingTimeMillis", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pendingTimeMillis: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PendingTimeMillis)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pendingTimeMillis (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pendingTimeMillis: ", p), err)
		}
	}
	return err
}

func (p *TCommandThreadDump) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommandThreadDump(%+v)", *p)
}

// Attributes:
//  - StackDepth
//  - StackFrame
type TMonitorInfo struct {
	StackDepth int32  `thrift:"stackDepth,1" db:"stackDepth" json:"stackDepth"`
	StackFrame string `thrift:"stackFrame,2" db:"stackFrame" json:"stackFrame"`
}

func NewTMonitorInfo() *TMonitorInfo {
	return &TMonitorInfo{}
}

func (p *TMonitorInfo) GetStackDepth() int32 {
	return p.StackDepth
}

func (p *TMonitorInfo) GetStackFrame() string {
	return p.StackFrame
}
func (p *TMonitorInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMonitorInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StackDepth = v
	}
	return nil
}

func (p *TMonitorInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StackFrame = v
	}
	return nil
}

func (p *TMonitorInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMonitorInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMonitorInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stackDepth", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stackDepth: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StackDepth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stackDepth (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stackDepth: ", p), err)
	}
	return err
}

func (p *TMonitorInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stackFrame", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stackFrame: ", p), err)
	}
	if err := oprot.WriteString(string(p.StackFrame)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stackFrame (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stackFrame: ", p), err)
	}
	return err
}

func (p *TMonitorInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMonitorInfo(%+v)", *p)
}

// Attributes:
//  - ThreadName
//  - ThreadId
//  - BlockedTime
//  - BlockedCount
//  - WaitedTime
//  - WaitedCount
//  - LockName
//  - LockOwnerId
//  - LockOwnerName
//  - InNative
//  - Suspended
//  - ThreadState
//  - StackTrace
//  - LockedMonitors
//  - LockedSynchronizers
type TThreadDump struct {
	ThreadName          string          `thrift:"threadName,1" db:"threadName" json:"threadName"`
	ThreadId            int64           `thrift:"threadId,2" db:"threadId" json:"threadId"`
	BlockedTime         int64           `thrift:"blockedTime,3" db:"blockedTime" json:"blockedTime"`
	BlockedCount        int64           `thrift:"blockedCount,4" db:"blockedCount" json:"blockedCount"`
	WaitedTime          int64           `thrift:"waitedTime,5" db:"waitedTime" json:"waitedTime"`
	WaitedCount         int64           `thrift:"waitedCount,6" db:"waitedCount" json:"waitedCount"`
	LockName            string          `thrift:"lockName,7" db:"lockName" json:"lockName"`
	LockOwnerId         int64           `thrift:"lockOwnerId,8" db:"lockOwnerId" json:"lockOwnerId"`
	LockOwnerName       string          `thrift:"lockOwnerName,9" db:"lockOwnerName" json:"lockOwnerName"`
	InNative            bool            `thrift:"inNative,10" db:"inNative" json:"inNative"`
	Suspended           bool            `thrift:"suspended,11" db:"suspended" json:"suspended"`
	ThreadState         TThreadState    `thrift:"threadState,12" db:"threadState" json:"threadState"`
	StackTrace          []string        `thrift:"stackTrace,13" db:"stackTrace" json:"stackTrace"`
	LockedMonitors      []*TMonitorInfo `thrift:"lockedMonitors,14" db:"lockedMonitors" json:"lockedMonitors"`
	LockedSynchronizers []string        `thrift:"lockedSynchronizers,15" db:"lockedSynchronizers" json:"lockedSynchronizers"`
}

func NewTThreadDump() *TThreadDump {
	return &TThreadDump{}
}

func (p *TThreadDump) GetThreadName() string {
	return p.ThreadName
}

func (p *TThreadDump) GetThreadId() int64 {
	return p.ThreadId
}

func (p *TThreadDump) GetBlockedTime() int64 {
	return p.BlockedTime
}

func (p *TThreadDump) GetBlockedCount() int64 {
	return p.BlockedCount
}

func (p *TThreadDump) GetWaitedTime() int64 {
	return p.WaitedTime
}

func (p *TThreadDump) GetWaitedCount() int64 {
	return p.WaitedCount
}

func (p *TThreadDump) GetLockName() string {
	return p.LockName
}

func (p *TThreadDump) GetLockOwnerId() int64 {
	return p.LockOwnerId
}

func (p *TThreadDump) GetLockOwnerName() string {
	return p.LockOwnerName
}

func (p *TThreadDump) GetInNative() bool {
	return p.InNative
}

func (p *TThreadDump) GetSuspended() bool {
	return p.Suspended
}

func (p *TThreadDump) GetThreadState() TThreadState {
	return p.ThreadState
}

func (p *TThreadDump) GetStackTrace() []string {
	return p.StackTrace
}

func (p *TThreadDump) GetLockedMonitors() []*TMonitorInfo {
	return p.LockedMonitors
}

func (p *TThreadDump) GetLockedSynchronizers() []string {
	return p.LockedSynchronizers
}
func (p *TThreadDump) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TThreadDump) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadName = v
	}
	return nil
}

func (p *TThreadDump) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *TThreadDump) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BlockedTime = v
	}
	return nil
}

func (p *TThreadDump) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BlockedCount = v
	}
	return nil
}

func (p *TThreadDump) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WaitedTime = v
	}
	return nil
}

func (p *TThreadDump) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WaitedCount = v
	}
	return nil
}

func (p *TThreadDump) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LockName = v
	}
	return nil
}

func (p *TThreadDump) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.LockOwnerId = v
	}
	return nil
}

func (p *TThreadDump) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.LockOwnerName = v
	}
	return nil
}

func (p *TThreadDump) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.InNative = v
	}
	return nil
}

func (p *TThreadDump) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Suspended = v
	}
	return nil
}

func (p *TThreadDump) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := TThreadState(v)
		p.ThreadState = temp
	}
	return nil
}

func (p *TThreadDump) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StackTrace = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.StackTrace = append(p.StackTrace, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TThreadDump) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMonitorInfo, 0, size)
	p.LockedMonitors = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TMonitorInfo{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.LockedMonitors = append(p.LockedMonitors, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TThreadDump) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.LockedSynchronizers = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.LockedSynchronizers = append(p.LockedSynchronizers, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TThreadDump) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TThreadDump"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TThreadDump) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadName: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:threadId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:threadId: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockedTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:blockedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockedTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:blockedTime: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockedCount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:blockedCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockedCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockedCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:blockedCount: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("waitedTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:waitedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WaitedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.waitedTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:waitedTime: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("waitedCount", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:waitedCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WaitedCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.waitedCount (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:waitedCount: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockName", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lockName: ", p), err)
	}
	if err := oprot.WriteString(string(p.LockName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lockName (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lockName: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockOwnerId", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lockOwnerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LockOwnerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lockOwnerId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lockOwnerId: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockOwnerName", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lockOwnerName: ", p), err)
	}
	if err := oprot.WriteString(string(p.LockOwnerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lockOwnerName (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lockOwnerName: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inNative", thrift.BOOL, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:inNative: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.InNative)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inNative (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:inNative: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("suspended", thrift.BOOL, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:suspended: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Suspended)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.suspended (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:suspended: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadState", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:threadState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ThreadState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadState (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:threadState: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stackTrace", thrift.LIST, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:stackTrace: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.StackTrace)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StackTrace {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:stackTrace: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockedMonitors", thrift.LIST, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:lockedMonitors: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LockedMonitors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LockedMonitors {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:lockedMonitors: ", p), err)
	}
	return err
}

func (p *TThreadDump) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockedSynchronizers", thrift.LIST, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:lockedSynchronizers: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.LockedSynchronizers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LockedSynchronizers {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:lockedSynchronizers: ", p), err)
	}
	return err
}

func (p *TThreadDump) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TThreadDump(%+v)", *p)
}

// Attributes:
//  - ThreadName
//  - ThreadId
//  - ThreadState
type TThreadLightDump struct {
	ThreadName  string        `thrift:"threadName,1" db:"threadName" json:"threadName"`
	ThreadId    int64         `thrift:"threadId,2" db:"threadId" json:"threadId"`
	ThreadState *TThreadState `thrift:"threadState,3" db:"threadState" json:"threadState,omitempty"`
}

func NewTThreadLightDump() *TThreadLightDump {
	return &TThreadLightDump{}
}

func (p *TThreadLightDump) GetThreadName() string {
	return p.ThreadName
}

func (p *TThreadLightDump) GetThreadId() int64 {
	return p.ThreadId
}

var TThreadLightDump_ThreadState_DEFAULT TThreadState

func (p *TThreadLightDump) GetThreadState() TThreadState {
	if !p.IsSetThreadState() {
		return TThreadLightDump_ThreadState_DEFAULT
	}
	return *p.ThreadState
}
func (p *TThreadLightDump) IsSetThreadState() bool {
	return p.ThreadState != nil
}

func (p *TThreadLightDump) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TThreadLightDump) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadName = v
	}
	return nil
}

func (p *TThreadLightDump) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *TThreadLightDump) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TThreadState(v)
		p.ThreadState = &temp
	}
	return nil
}

func (p *TThreadLightDump) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TThreadLightDump"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TThreadLightDump) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadName: ", p), err)
	}
	return err
}

func (p *TThreadLightDump) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:threadId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:threadId: ", p), err)
	}
	return err
}

func (p *TThreadLightDump) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreadState() {
		if err := oprot.WriteFieldBegin("threadState", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:threadState: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ThreadState)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.threadState (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:threadState: ", p), err)
		}
	}
	return err
}

func (p *TThreadLightDump) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TThreadLightDump(%+v)", *p)
}

// Attributes:
//  - ThreadDumps
type TCommandThreadDumpResponse struct {
	ThreadDumps []*TThreadDump `thrift:"threadDumps,1" db:"threadDumps" json:"threadDumps"`
}

func NewTCommandThreadDumpResponse() *TCommandThreadDumpResponse {
	return &TCommandThreadDumpResponse{}
}

func (p *TCommandThreadDumpResponse) GetThreadDumps() []*TThreadDump {
	return p.ThreadDumps
}
func (p *TCommandThreadDumpResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCommandThreadDumpResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TThreadDump, 0, size)
	p.ThreadDumps = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TThreadDump{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.ThreadDumps = append(p.ThreadDumps, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCommandThreadDumpResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCommandThreadDumpResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCommandThreadDumpResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadDumps", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadDumps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ThreadDumps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ThreadDumps {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadDumps: ", p), err)
	}
	return err
}

func (p *TCommandThreadDumpResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommandThreadDumpResponse(%+v)", *p)
}

type TCmdActiveThreadCount struct {
}

func NewTCmdActiveThreadCount() *TCmdActiveThreadCount {
	return &TCmdActiveThreadCount{}
}

func (p *TCmdActiveThreadCount) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCmdActiveThreadCount) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCmdActiveThreadCount"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadCount) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCmdActiveThreadCount(%+v)", *p)
}

// Attributes:
//  - HistogramSchemaType
//  - ActiveThreadCount
//  - TimeStamp
type TCmdActiveThreadCountRes struct {
	HistogramSchemaType int32   `thrift:"histogramSchemaType,1" db:"histogramSchemaType" json:"histogramSchemaType"`
	ActiveThreadCount   []int32 `thrift:"activeThreadCount,2" db:"activeThreadCount" json:"activeThreadCount"`
	TimeStamp           *int64  `thrift:"timeStamp,3" db:"timeStamp" json:"timeStamp,omitempty"`
}

func NewTCmdActiveThreadCountRes() *TCmdActiveThreadCountRes {
	return &TCmdActiveThreadCountRes{}
}

func (p *TCmdActiveThreadCountRes) GetHistogramSchemaType() int32 {
	return p.HistogramSchemaType
}

func (p *TCmdActiveThreadCountRes) GetActiveThreadCount() []int32 {
	return p.ActiveThreadCount
}

var TCmdActiveThreadCountRes_TimeStamp_DEFAULT int64

func (p *TCmdActiveThreadCountRes) GetTimeStamp() int64 {
	if !p.IsSetTimeStamp() {
		return TCmdActiveThreadCountRes_TimeStamp_DEFAULT
	}
	return *p.TimeStamp
}
func (p *TCmdActiveThreadCountRes) IsSetTimeStamp() bool {
	return p.TimeStamp != nil
}

func (p *TCmdActiveThreadCountRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCmdActiveThreadCountRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HistogramSchemaType = v
	}
	return nil
}

func (p *TCmdActiveThreadCountRes) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.ActiveThreadCount = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.ActiveThreadCount = append(p.ActiveThreadCount, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadCountRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TimeStamp = &v
	}
	return nil
}

func (p *TCmdActiveThreadCountRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCmdActiveThreadCountRes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadCountRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("histogramSchemaType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:histogramSchemaType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HistogramSchemaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.histogramSchemaType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:histogramSchemaType: ", p), err)
	}
	return err
}

func (p *TCmdActiveThreadCountRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("activeThreadCount", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:activeThreadCount: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.ActiveThreadCount)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ActiveThreadCount {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:activeThreadCount: ", p), err)
	}
	return err
}

func (p *TCmdActiveThreadCountRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeStamp() {
		if err := oprot.WriteFieldBegin("timeStamp", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeStamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TimeStamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeStamp (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeStamp: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadCountRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCmdActiveThreadCountRes(%+v)", *p)
}

// Attributes:
//  - StartTime
//  - LocalTraceId
//  - ThreadDump
//  - Sampled
//  - TransactionId
//  - EntryPoint
type TActiveThreadDump struct {
	StartTime     int64        `thrift:"startTime,1" db:"startTime" json:"startTime"`
	LocalTraceId  int64        `thrift:"localTraceId,2" db:"localTraceId" json:"localTraceId"`
	ThreadDump    *TThreadDump `thrift:"threadDump,3" db:"threadDump" json:"threadDump"`
	Sampled       bool         `thrift:"sampled,4" db:"sampled" json:"sampled"`
	TransactionId *string      `thrift:"transactionId,5" db:"transactionId" json:"transactionId,omitempty"`
	EntryPoint    *string      `thrift:"entryPoint,6" db:"entryPoint" json:"entryPoint,omitempty"`
}

func NewTActiveThreadDump() *TActiveThreadDump {
	return &TActiveThreadDump{}
}

func (p *TActiveThreadDump) GetStartTime() int64 {
	return p.StartTime
}

func (p *TActiveThreadDump) GetLocalTraceId() int64 {
	return p.LocalTraceId
}

var TActiveThreadDump_ThreadDump_DEFAULT *TThreadDump

func (p *TActiveThreadDump) GetThreadDump() *TThreadDump {
	if !p.IsSetThreadDump() {
		return TActiveThreadDump_ThreadDump_DEFAULT
	}
	return p.ThreadDump
}

func (p *TActiveThreadDump) GetSampled() bool {
	return p.Sampled
}

var TActiveThreadDump_TransactionId_DEFAULT string

func (p *TActiveThreadDump) GetTransactionId() string {
	if !p.IsSetTransactionId() {
		return TActiveThreadDump_TransactionId_DEFAULT
	}
	return *p.TransactionId
}

var TActiveThreadDump_EntryPoint_DEFAULT string

func (p *TActiveThreadDump) GetEntryPoint() string {
	if !p.IsSetEntryPoint() {
		return TActiveThreadDump_EntryPoint_DEFAULT
	}
	return *p.EntryPoint
}
func (p *TActiveThreadDump) IsSetThreadDump() bool {
	return p.ThreadDump != nil
}

func (p *TActiveThreadDump) IsSetTransactionId() bool {
	return p.TransactionId != nil
}

func (p *TActiveThreadDump) IsSetEntryPoint() bool {
	return p.EntryPoint != nil
}

func (p *TActiveThreadDump) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TActiveThreadDump) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TActiveThreadDump) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LocalTraceId = v
	}
	return nil
}

func (p *TActiveThreadDump) ReadField3(iprot thrift.TProtocol) error {
	p.ThreadDump = &TThreadDump{}
	if err := p.ThreadDump.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ThreadDump), err)
	}
	return nil
}

func (p *TActiveThreadDump) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sampled = v
	}
	return nil
}

func (p *TActiveThreadDump) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TransactionId = &v
	}
	return nil
}

func (p *TActiveThreadDump) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EntryPoint = &v
	}
	return nil
}

func (p *TActiveThreadDump) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TActiveThreadDump"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TActiveThreadDump) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startTime: ", p), err)
	}
	return err
}

func (p *TActiveThreadDump) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localTraceId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localTraceId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LocalTraceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localTraceId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localTraceId: ", p), err)
	}
	return err
}

func (p *TActiveThreadDump) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadDump", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:threadDump: ", p), err)
	}
	if err := p.ThreadDump.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ThreadDump), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:threadDump: ", p), err)
	}
	return err
}

func (p *TActiveThreadDump) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sampled", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sampled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Sampled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sampled (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sampled: ", p), err)
	}
	return err
}

func (p *TActiveThreadDump) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionId() {
		if err := oprot.WriteFieldBegin("transactionId", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transactionId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TransactionId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transactionId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transactionId: ", p), err)
		}
	}
	return err
}

func (p *TActiveThreadDump) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryPoint() {
		if err := oprot.WriteFieldBegin("entryPoint", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:entryPoint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntryPoint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entryPoint (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:entryPoint: ", p), err)
		}
	}
	return err
}

func (p *TActiveThreadDump) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TActiveThreadDump(%+v)", *p)
}

// Attributes:
//  - StartTime
//  - LocalTraceId
//  - ThreadDump
//  - Sampled
//  - TransactionId
//  - EntryPoint
type TActiveThreadLightDump struct {
	StartTime     int64             `thrift:"startTime,1" db:"startTime" json:"startTime"`
	LocalTraceId  int64             `thrift:"localTraceId,2" db:"localTraceId" json:"localTraceId"`
	ThreadDump    *TThreadLightDump `thrift:"threadDump,3" db:"threadDump" json:"threadDump"`
	Sampled       bool              `thrift:"sampled,4" db:"sampled" json:"sampled"`
	TransactionId *string           `thrift:"transactionId,5" db:"transactionId" json:"transactionId,omitempty"`
	EntryPoint    *string           `thrift:"entryPoint,6" db:"entryPoint" json:"entryPoint,omitempty"`
}

func NewTActiveThreadLightDump() *TActiveThreadLightDump {
	return &TActiveThreadLightDump{}
}

func (p *TActiveThreadLightDump) GetStartTime() int64 {
	return p.StartTime
}

func (p *TActiveThreadLightDump) GetLocalTraceId() int64 {
	return p.LocalTraceId
}

var TActiveThreadLightDump_ThreadDump_DEFAULT *TThreadLightDump

func (p *TActiveThreadLightDump) GetThreadDump() *TThreadLightDump {
	if !p.IsSetThreadDump() {
		return TActiveThreadLightDump_ThreadDump_DEFAULT
	}
	return p.ThreadDump
}

func (p *TActiveThreadLightDump) GetSampled() bool {
	return p.Sampled
}

var TActiveThreadLightDump_TransactionId_DEFAULT string

func (p *TActiveThreadLightDump) GetTransactionId() string {
	if !p.IsSetTransactionId() {
		return TActiveThreadLightDump_TransactionId_DEFAULT
	}
	return *p.TransactionId
}

var TActiveThreadLightDump_EntryPoint_DEFAULT string

func (p *TActiveThreadLightDump) GetEntryPoint() string {
	if !p.IsSetEntryPoint() {
		return TActiveThreadLightDump_EntryPoint_DEFAULT
	}
	return *p.EntryPoint
}
func (p *TActiveThreadLightDump) IsSetThreadDump() bool {
	return p.ThreadDump != nil
}

func (p *TActiveThreadLightDump) IsSetTransactionId() bool {
	return p.TransactionId != nil
}

func (p *TActiveThreadLightDump) IsSetEntryPoint() bool {
	return p.EntryPoint != nil
}

func (p *TActiveThreadLightDump) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TActiveThreadLightDump) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TActiveThreadLightDump) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LocalTraceId = v
	}
	return nil
}

func (p *TActiveThreadLightDump) ReadField3(iprot thrift.TProtocol) error {
	p.ThreadDump = &TThreadLightDump{}
	if err := p.ThreadDump.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ThreadDump), err)
	}
	return nil
}

func (p *TActiveThreadLightDump) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sampled = v
	}
	return nil
}

func (p *TActiveThreadLightDump) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TransactionId = &v
	}
	return nil
}

func (p *TActiveThreadLightDump) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EntryPoint = &v
	}
	return nil
}

func (p *TActiveThreadLightDump) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TActiveThreadLightDump"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TActiveThreadLightDump) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startTime: ", p), err)
	}
	return err
}

func (p *TActiveThreadLightDump) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localTraceId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localTraceId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LocalTraceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localTraceId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localTraceId: ", p), err)
	}
	return err
}

func (p *TActiveThreadLightDump) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadDump", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:threadDump: ", p), err)
	}
	if err := p.ThreadDump.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ThreadDump), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:threadDump: ", p), err)
	}
	return err
}

func (p *TActiveThreadLightDump) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sampled", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sampled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Sampled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sampled (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sampled: ", p), err)
	}
	return err
}

func (p *TActiveThreadLightDump) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionId() {
		if err := oprot.WriteFieldBegin("transactionId", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transactionId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TransactionId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transactionId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transactionId: ", p), err)
		}
	}
	return err
}

func (p *TActiveThreadLightDump) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryPoint() {
		if err := oprot.WriteFieldBegin("entryPoint", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:entryPoint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntryPoint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entryPoint (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:entryPoint: ", p), err)
		}
	}
	return err
}

func (p *TActiveThreadLightDump) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TActiveThreadLightDump(%+v)", *p)
}

// Attributes:
//  - Limit
//  - ThreadNameList
//  - LocalTraceIdList
type TCmdActiveThreadDump struct {
	Limit            *int32   `thrift:"limit,1" db:"limit" json:"limit,omitempty"`
	ThreadNameList   []string `thrift:"threadNameList,2" db:"threadNameList" json:"threadNameList,omitempty"`
	LocalTraceIdList []int64  `thrift:"localTraceIdList,3" db:"localTraceIdList" json:"localTraceIdList,omitempty"`
}

func NewTCmdActiveThreadDump() *TCmdActiveThreadDump {
	return &TCmdActiveThreadDump{}
}

var TCmdActiveThreadDump_Limit_DEFAULT int32

func (p *TCmdActiveThreadDump) GetLimit() int32 {
	if !p.IsSetLimit() {
		return TCmdActiveThreadDump_Limit_DEFAULT
	}
	return *p.Limit
}

var TCmdActiveThreadDump_ThreadNameList_DEFAULT []string

func (p *TCmdActiveThreadDump) GetThreadNameList() []string {
	return p.ThreadNameList
}

var TCmdActiveThreadDump_LocalTraceIdList_DEFAULT []int64

func (p *TCmdActiveThreadDump) GetLocalTraceIdList() []int64 {
	return p.LocalTraceIdList
}
func (p *TCmdActiveThreadDump) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *TCmdActiveThreadDump) IsSetThreadNameList() bool {
	return p.ThreadNameList != nil
}

func (p *TCmdActiveThreadDump) IsSetLocalTraceIdList() bool {
	return p.LocalTraceIdList != nil
}

func (p *TCmdActiveThreadDump) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCmdActiveThreadDump) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *TCmdActiveThreadDump) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ThreadNameList = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.ThreadNameList = append(p.ThreadNameList, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadDump) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.LocalTraceIdList = tSlice
	for i := 0; i < size; i++ {
		var _elem6 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.LocalTraceIdList = append(p.LocalTraceIdList, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadDump) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCmdActiveThreadDump"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadDump) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:limit: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:limit: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadDump) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreadNameList() {
		if err := oprot.WriteFieldBegin("threadNameList", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:threadNameList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ThreadNameList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ThreadNameList {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:threadNameList: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadDump) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalTraceIdList() {
		if err := oprot.WriteFieldBegin("localTraceIdList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:localTraceIdList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.LocalTraceIdList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.LocalTraceIdList {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:localTraceIdList: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadDump) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCmdActiveThreadDump(%+v)", *p)
}

// Attributes:
//  - Limit
//  - ThreadNameList
//  - LocalTraceIdList
type TCmdActiveThreadLightDump struct {
	Limit            *int32   `thrift:"limit,1" db:"limit" json:"limit,omitempty"`
	ThreadNameList   []string `thrift:"threadNameList,2" db:"threadNameList" json:"threadNameList,omitempty"`
	LocalTraceIdList []int64  `thrift:"localTraceIdList,3" db:"localTraceIdList" json:"localTraceIdList,omitempty"`
}

func NewTCmdActiveThreadLightDump() *TCmdActiveThreadLightDump {
	return &TCmdActiveThreadLightDump{}
}

var TCmdActiveThreadLightDump_Limit_DEFAULT int32

func (p *TCmdActiveThreadLightDump) GetLimit() int32 {
	if !p.IsSetLimit() {
		return TCmdActiveThreadLightDump_Limit_DEFAULT
	}
	return *p.Limit
}

var TCmdActiveThreadLightDump_ThreadNameList_DEFAULT []string

func (p *TCmdActiveThreadLightDump) GetThreadNameList() []string {
	return p.ThreadNameList
}

var TCmdActiveThreadLightDump_LocalTraceIdList_DEFAULT []int64

func (p *TCmdActiveThreadLightDump) GetLocalTraceIdList() []int64 {
	return p.LocalTraceIdList
}
func (p *TCmdActiveThreadLightDump) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *TCmdActiveThreadLightDump) IsSetThreadNameList() bool {
	return p.ThreadNameList != nil
}

func (p *TCmdActiveThreadLightDump) IsSetLocalTraceIdList() bool {
	return p.LocalTraceIdList != nil
}

func (p *TCmdActiveThreadLightDump) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCmdActiveThreadLightDump) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *TCmdActiveThreadLightDump) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ThreadNameList = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.ThreadNameList = append(p.ThreadNameList, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadLightDump) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.LocalTraceIdList = tSlice
	for i := 0; i < size; i++ {
		var _elem8 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.LocalTraceIdList = append(p.LocalTraceIdList, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadLightDump) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCmdActiveThreadLightDump"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadLightDump) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:limit: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:limit: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadLightDump) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreadNameList() {
		if err := oprot.WriteFieldBegin("threadNameList", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:threadNameList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ThreadNameList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ThreadNameList {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:threadNameList: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadLightDump) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalTraceIdList() {
		if err := oprot.WriteFieldBegin("localTraceIdList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:localTraceIdList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.LocalTraceIdList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.LocalTraceIdList {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:localTraceIdList: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadLightDump) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCmdActiveThreadLightDump(%+v)", *p)
}

// Attributes:
//  - ThreadDumps
//  - Type
//  - SubType
//  - Version
type TCmdActiveThreadDumpRes struct {
	ThreadDumps []*TActiveThreadDump `thrift:"threadDumps,1" db:"threadDumps" json:"threadDumps"`
	Type        *string              `thrift:"type,2" db:"type" json:"type,omitempty"`
	SubType     *string              `thrift:"subType,3" db:"subType" json:"subType,omitempty"`
	Version     *string              `thrift:"version,4" db:"version" json:"version,omitempty"`
}

func NewTCmdActiveThreadDumpRes() *TCmdActiveThreadDumpRes {
	return &TCmdActiveThreadDumpRes{}
}

func (p *TCmdActiveThreadDumpRes) GetThreadDumps() []*TActiveThreadDump {
	return p.ThreadDumps
}

var TCmdActiveThreadDumpRes_Type_DEFAULT string

func (p *TCmdActiveThreadDumpRes) GetType() string {
	if !p.IsSetType() {
		return TCmdActiveThreadDumpRes_Type_DEFAULT
	}
	return *p.Type
}

var TCmdActiveThreadDumpRes_SubType_DEFAULT string

func (p *TCmdActiveThreadDumpRes) GetSubType() string {
	if !p.IsSetSubType() {
		return TCmdActiveThreadDumpRes_SubType_DEFAULT
	}
	return *p.SubType
}

var TCmdActiveThreadDumpRes_Version_DEFAULT string

func (p *TCmdActiveThreadDumpRes) GetVersion() string {
	if !p.IsSetVersion() {
		return TCmdActiveThreadDumpRes_Version_DEFAULT
	}
	return *p.Version
}
func (p *TCmdActiveThreadDumpRes) IsSetType() bool {
	return p.Type != nil
}

func (p *TCmdActiveThreadDumpRes) IsSetSubType() bool {
	return p.SubType != nil
}

func (p *TCmdActiveThreadDumpRes) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TCmdActiveThreadDumpRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCmdActiveThreadDumpRes) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TActiveThreadDump, 0, size)
	p.ThreadDumps = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &TActiveThreadDump{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.ThreadDumps = append(p.ThreadDumps, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadDumpRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *TCmdActiveThreadDumpRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SubType = &v
	}
	return nil
}

func (p *TCmdActiveThreadDumpRes) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *TCmdActiveThreadDumpRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCmdActiveThreadDumpRes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadDumpRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadDumps", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadDumps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ThreadDumps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ThreadDumps {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadDumps: ", p), err)
	}
	return err
}

func (p *TCmdActiveThreadDumpRes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadDumpRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubType() {
		if err := oprot.WriteFieldBegin("subType", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SubType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subType: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadDumpRes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:version: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:version: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadDumpRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCmdActiveThreadDumpRes(%+v)", *p)
}

// Attributes:
//  - ThreadDumps
//  - Type
//  - SubType
//  - Version
type TCmdActiveThreadLightDumpRes struct {
	ThreadDumps []*TActiveThreadLightDump `thrift:"threadDumps,1" db:"threadDumps" json:"threadDumps"`
	Type        *string                   `thrift:"type,2" db:"type" json:"type,omitempty"`
	SubType     *string                   `thrift:"subType,3" db:"subType" json:"subType,omitempty"`
	Version     *string                   `thrift:"version,4" db:"version" json:"version,omitempty"`
}

func NewTCmdActiveThreadLightDumpRes() *TCmdActiveThreadLightDumpRes {
	return &TCmdActiveThreadLightDumpRes{}
}

func (p *TCmdActiveThreadLightDumpRes) GetThreadDumps() []*TActiveThreadLightDump {
	return p.ThreadDumps
}

var TCmdActiveThreadLightDumpRes_Type_DEFAULT string

func (p *TCmdActiveThreadLightDumpRes) GetType() string {
	if !p.IsSetType() {
		return TCmdActiveThreadLightDumpRes_Type_DEFAULT
	}
	return *p.Type
}

var TCmdActiveThreadLightDumpRes_SubType_DEFAULT string

func (p *TCmdActiveThreadLightDumpRes) GetSubType() string {
	if !p.IsSetSubType() {
		return TCmdActiveThreadLightDumpRes_SubType_DEFAULT
	}
	return *p.SubType
}

var TCmdActiveThreadLightDumpRes_Version_DEFAULT string

func (p *TCmdActiveThreadLightDumpRes) GetVersion() string {
	if !p.IsSetVersion() {
		return TCmdActiveThreadLightDumpRes_Version_DEFAULT
	}
	return *p.Version
}
func (p *TCmdActiveThreadLightDumpRes) IsSetType() bool {
	return p.Type != nil
}

func (p *TCmdActiveThreadLightDumpRes) IsSetSubType() bool {
	return p.SubType != nil
}

func (p *TCmdActiveThreadLightDumpRes) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TCmdActiveThreadLightDumpRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCmdActiveThreadLightDumpRes) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TActiveThreadLightDump, 0, size)
	p.ThreadDumps = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &TActiveThreadLightDump{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.ThreadDumps = append(p.ThreadDumps, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadLightDumpRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *TCmdActiveThreadLightDumpRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SubType = &v
	}
	return nil
}

func (p *TCmdActiveThreadLightDumpRes) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *TCmdActiveThreadLightDumpRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCmdActiveThreadLightDumpRes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCmdActiveThreadLightDumpRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadDumps", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadDumps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ThreadDumps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ThreadDumps {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadDumps: ", p), err)
	}
	return err
}

func (p *TCmdActiveThreadLightDumpRes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadLightDumpRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubType() {
		if err := oprot.WriteFieldBegin("subType", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SubType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subType: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadLightDumpRes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:version: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:version: ", p), err)
		}
	}
	return err
}

func (p *TCmdActiveThreadLightDumpRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCmdActiveThreadLightDumpRes(%+v)", *p)
}

// Attributes:
//  - Message
type TCommandEcho struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTCommandEcho() *TCommandEcho {
	return &TCommandEcho{}
}

func (p *TCommandEcho) GetMessage() string {
	return p.Message
}
func (p *TCommandEcho) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCommandEcho) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *TCommandEcho) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCommandEcho"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCommandEcho) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *TCommandEcho) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommandEcho(%+v)", *p)
}

// Attributes:
//  - ApplicationName
//  - AgentId
//  - StartTime
//  - Payload
type TCommandTransfer struct {
	ApplicationName string `thrift:"applicationName,1" db:"applicationName" json:"applicationName"`
	AgentId         string `thrift:"agentId,2" db:"agentId" json:"agentId"`
	StartTime       *int64 `thrift:"startTime,3" db:"startTime" json:"startTime,omitempty"`
	Payload         []byte `thrift:"payload,4" db:"payload" json:"payload"`
}

func NewTCommandTransfer() *TCommandTransfer {
	return &TCommandTransfer{}
}

func (p *TCommandTransfer) GetApplicationName() string {
	return p.ApplicationName
}

func (p *TCommandTransfer) GetAgentId() string {
	return p.AgentId
}

var TCommandTransfer_StartTime_DEFAULT int64

func (p *TCommandTransfer) GetStartTime() int64 {
	if !p.IsSetStartTime() {
		return TCommandTransfer_StartTime_DEFAULT
	}
	return *p.StartTime
}

func (p *TCommandTransfer) GetPayload() []byte {
	return p.Payload
}
func (p *TCommandTransfer) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *TCommandTransfer) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCommandTransfer) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ApplicationName = v
	}
	return nil
}

func (p *TCommandTransfer) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TCommandTransfer) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *TCommandTransfer) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Payload = v
	}
	return nil
}

func (p *TCommandTransfer) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCommandTransfer"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCommandTransfer) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:applicationName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:applicationName: ", p), err)
	}
	return err
}

func (p *TCommandTransfer) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentId: ", p), err)
	}
	return err
}

func (p *TCommandTransfer) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err)
		}
	}
	return err
}

func (p *TCommandTransfer) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payload", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:payload: ", p), err)
	}
	if err := oprot.WriteBinary(p.Payload); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.payload (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:payload: ", p), err)
	}
	return err
}

func (p *TCommandTransfer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommandTransfer(%+v)", *p)
}

// Attributes:
//  - RouteResult_
//  - Payload
//  - Message
type TCommandTransferResponse struct {
	RouteResult_ TRouteResult_ `thrift:"routeResult,1" db:"routeResult" json:"routeResult"`
	Payload      []byte        `thrift:"payload,2" db:"payload" json:"payload"`
	Message      *string       `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewTCommandTransferResponse() *TCommandTransferResponse {
	return &TCommandTransferResponse{}
}

func (p *TCommandTransferResponse) GetRouteResult_() TRouteResult_ {
	return p.RouteResult_
}

func (p *TCommandTransferResponse) GetPayload() []byte {
	return p.Payload
}

var TCommandTransferResponse_Message_DEFAULT string

func (p *TCommandTransferResponse) GetMessage() string {
	if !p.IsSetMessage() {
		return TCommandTransferResponse_Message_DEFAULT
	}
	return *p.Message
}
func (p *TCommandTransferResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TCommandTransferResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCommandTransferResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TRouteResult_(v)
		p.RouteResult_ = temp
	}
	return nil
}

func (p *TCommandTransferResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Payload = v
	}
	return nil
}

func (p *TCommandTransferResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TCommandTransferResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCommandTransferResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCommandTransferResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("routeResult", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:routeResult: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RouteResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.routeResult (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:routeResult: ", p), err)
	}
	return err
}

func (p *TCommandTransferResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payload", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:payload: ", p), err)
	}
	if err := oprot.WriteBinary(p.Payload); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.payload (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:payload: ", p), err)
	}
	return err
}

func (p *TCommandTransferResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *TCommandTransferResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommandTransferResponse(%+v)", *p)
}
