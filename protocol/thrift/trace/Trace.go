// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package trace

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - IntValue
//  - StringValue
type TIntStringValue struct {
	IntValue    int32   `thrift:"intValue,1" db:"intValue" json:"intValue"`
	StringValue *string `thrift:"stringValue,2" db:"stringValue" json:"stringValue,omitempty"`
}

func NewTIntStringValue() *TIntStringValue {
	return &TIntStringValue{}
}

func (p *TIntStringValue) GetIntValue() int32 {
	return p.IntValue
}

var TIntStringValue_StringValue_DEFAULT string

func (p *TIntStringValue) GetStringValue() string {
	if !p.IsSetStringValue() {
		return TIntStringValue_StringValue_DEFAULT
	}
	return *p.StringValue
}
func (p *TIntStringValue) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *TIntStringValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIntStringValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IntValue = v
	}
	return nil
}

func (p *TIntStringValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *TIntStringValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIntStringValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIntStringValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("intValue", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intValue: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IntValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.intValue (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intValue: ", p), err)
	}
	return err
}

func (p *TIntStringValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stringValue (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue: ", p), err)
		}
	}
	return err
}

func (p *TIntStringValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIntStringValue(%+v)", *p)
}

// Attributes:
//  - IntValue
//  - StringValue1
//  - StringValue2
type TIntStringStringValue struct {
	IntValue     int32   `thrift:"intValue,1" db:"intValue" json:"intValue"`
	StringValue1 *string `thrift:"stringValue1,2" db:"stringValue1" json:"stringValue1,omitempty"`
	StringValue2 *string `thrift:"stringValue2,3" db:"stringValue2" json:"stringValue2,omitempty"`
}

func NewTIntStringStringValue() *TIntStringStringValue {
	return &TIntStringStringValue{}
}

func (p *TIntStringStringValue) GetIntValue() int32 {
	return p.IntValue
}

var TIntStringStringValue_StringValue1_DEFAULT string

func (p *TIntStringStringValue) GetStringValue1() string {
	if !p.IsSetStringValue1() {
		return TIntStringStringValue_StringValue1_DEFAULT
	}
	return *p.StringValue1
}

var TIntStringStringValue_StringValue2_DEFAULT string

func (p *TIntStringStringValue) GetStringValue2() string {
	if !p.IsSetStringValue2() {
		return TIntStringStringValue_StringValue2_DEFAULT
	}
	return *p.StringValue2
}
func (p *TIntStringStringValue) IsSetStringValue1() bool {
	return p.StringValue1 != nil
}

func (p *TIntStringStringValue) IsSetStringValue2() bool {
	return p.StringValue2 != nil
}

func (p *TIntStringStringValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIntStringStringValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IntValue = v
	}
	return nil
}

func (p *TIntStringStringValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StringValue1 = &v
	}
	return nil
}

func (p *TIntStringStringValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StringValue2 = &v
	}
	return nil
}

func (p *TIntStringStringValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIntStringStringValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIntStringStringValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("intValue", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intValue: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IntValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.intValue (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intValue: ", p), err)
	}
	return err
}

func (p *TIntStringStringValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue1() {
		if err := oprot.WriteFieldBegin("stringValue1", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue1: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue1)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stringValue1 (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue1: ", p), err)
		}
	}
	return err
}

func (p *TIntStringStringValue) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue2() {
		if err := oprot.WriteFieldBegin("stringValue2", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringValue2: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stringValue2 (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringValue2: ", p), err)
		}
	}
	return err
}

func (p *TIntStringStringValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIntStringStringValue(%+v)", *p)
}

// Attributes:
//  - LongValue
//  - IntValue1
//  - IntValue2
//  - ByteValue1
//  - ByteValue2
//  - StringValue
type TLongIntIntByteByteStringValue struct {
	LongValue   int64   `thrift:"longValue,1" db:"longValue" json:"longValue"`
	IntValue1   int32   `thrift:"intValue1,2" db:"intValue1" json:"intValue1"`
	IntValue2   *int32  `thrift:"intValue2,3" db:"intValue2" json:"intValue2,omitempty"`
	ByteValue1  *int8   `thrift:"byteValue1,4" db:"byteValue1" json:"byteValue1,omitempty"`
	ByteValue2  *int8   `thrift:"byteValue2,5" db:"byteValue2" json:"byteValue2,omitempty"`
	StringValue *string `thrift:"stringValue,6" db:"stringValue" json:"stringValue,omitempty"`
}

func NewTLongIntIntByteByteStringValue() *TLongIntIntByteByteStringValue {
	return &TLongIntIntByteByteStringValue{}
}

func (p *TLongIntIntByteByteStringValue) GetLongValue() int64 {
	return p.LongValue
}

func (p *TLongIntIntByteByteStringValue) GetIntValue1() int32 {
	return p.IntValue1
}

var TLongIntIntByteByteStringValue_IntValue2_DEFAULT int32

func (p *TLongIntIntByteByteStringValue) GetIntValue2() int32 {
	if !p.IsSetIntValue2() {
		return TLongIntIntByteByteStringValue_IntValue2_DEFAULT
	}
	return *p.IntValue2
}

var TLongIntIntByteByteStringValue_ByteValue1_DEFAULT int8

func (p *TLongIntIntByteByteStringValue) GetByteValue1() int8 {
	if !p.IsSetByteValue1() {
		return TLongIntIntByteByteStringValue_ByteValue1_DEFAULT
	}
	return *p.ByteValue1
}

var TLongIntIntByteByteStringValue_ByteValue2_DEFAULT int8

func (p *TLongIntIntByteByteStringValue) GetByteValue2() int8 {
	if !p.IsSetByteValue2() {
		return TLongIntIntByteByteStringValue_ByteValue2_DEFAULT
	}
	return *p.ByteValue2
}

var TLongIntIntByteByteStringValue_StringValue_DEFAULT string

func (p *TLongIntIntByteByteStringValue) GetStringValue() string {
	if !p.IsSetStringValue() {
		return TLongIntIntByteByteStringValue_StringValue_DEFAULT
	}
	return *p.StringValue
}
func (p *TLongIntIntByteByteStringValue) IsSetIntValue2() bool {
	return p.IntValue2 != nil
}

func (p *TLongIntIntByteByteStringValue) IsSetByteValue1() bool {
	return p.ByteValue1 != nil
}

func (p *TLongIntIntByteByteStringValue) IsSetByteValue2() bool {
	return p.ByteValue2 != nil
}

func (p *TLongIntIntByteByteStringValue) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *TLongIntIntByteByteStringValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LongValue = v
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IntValue1 = v
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IntValue2 = &v
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.ByteValue1 = &temp
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.ByteValue2 = &temp
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TLongIntIntByteByteStringValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TLongIntIntByteByteStringValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longValue", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:longValue: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LongValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.longValue (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:longValue: ", p), err)
	}
	return err
}

func (p *TLongIntIntByteByteStringValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("intValue1", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:intValue1: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IntValue1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.intValue1 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:intValue1: ", p), err)
	}
	return err
}

func (p *TLongIntIntByteByteStringValue) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntValue2() {
		if err := oprot.WriteFieldBegin("intValue2", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intValue2: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IntValue2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.intValue2 (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intValue2: ", p), err)
		}
	}
	return err
}

func (p *TLongIntIntByteByteStringValue) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetByteValue1() {
		if err := oprot.WriteFieldBegin("byteValue1", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:byteValue1: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ByteValue1)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.byteValue1 (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:byteValue1: ", p), err)
		}
	}
	return err
}

func (p *TLongIntIntByteByteStringValue) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetByteValue2() {
		if err := oprot.WriteFieldBegin("byteValue2", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:byteValue2: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ByteValue2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.byteValue2 (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:byteValue2: ", p), err)
		}
	}
	return err
}

func (p *TLongIntIntByteByteStringValue) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:stringValue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stringValue (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:stringValue: ", p), err)
		}
	}
	return err
}

func (p *TLongIntIntByteByteStringValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLongIntIntByteByteStringValue(%+v)", *p)
}

// Attributes:
//  - IntValue1
//  - BoolValue1
//  - IntValue2
//  - BoolValue2
type TIntBooleanIntBooleanValue struct {
	IntValue1  int32 `thrift:"intValue1,1" db:"intValue1" json:"intValue1"`
	BoolValue1 bool  `thrift:"boolValue1,2" db:"boolValue1" json:"boolValue1"`
	IntValue2  int32 `thrift:"intValue2,3" db:"intValue2" json:"intValue2"`
	BoolValue2 bool  `thrift:"boolValue2,4" db:"boolValue2" json:"boolValue2"`
}

func NewTIntBooleanIntBooleanValue() *TIntBooleanIntBooleanValue {
	return &TIntBooleanIntBooleanValue{}
}

func (p *TIntBooleanIntBooleanValue) GetIntValue1() int32 {
	return p.IntValue1
}

func (p *TIntBooleanIntBooleanValue) GetBoolValue1() bool {
	return p.BoolValue1
}

func (p *TIntBooleanIntBooleanValue) GetIntValue2() int32 {
	return p.IntValue2
}

func (p *TIntBooleanIntBooleanValue) GetBoolValue2() bool {
	return p.BoolValue2
}
func (p *TIntBooleanIntBooleanValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIntBooleanIntBooleanValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IntValue1 = v
	}
	return nil
}

func (p *TIntBooleanIntBooleanValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BoolValue1 = v
	}
	return nil
}

func (p *TIntBooleanIntBooleanValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IntValue2 = v
	}
	return nil
}

func (p *TIntBooleanIntBooleanValue) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BoolValue2 = v
	}
	return nil
}

func (p *TIntBooleanIntBooleanValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIntBooleanIntBooleanValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIntBooleanIntBooleanValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("intValue1", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intValue1: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IntValue1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.intValue1 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intValue1: ", p), err)
	}
	return err
}

func (p *TIntBooleanIntBooleanValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("boolValue1", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:boolValue1: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.BoolValue1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.boolValue1 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:boolValue1: ", p), err)
	}
	return err
}

func (p *TIntBooleanIntBooleanValue) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("intValue2", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intValue2: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IntValue2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.intValue2 (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intValue2: ", p), err)
	}
	return err
}

func (p *TIntBooleanIntBooleanValue) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("boolValue2", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:boolValue2: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.BoolValue2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.boolValue2 (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:boolValue2: ", p), err)
	}
	return err
}

func (p *TIntBooleanIntBooleanValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIntBooleanIntBooleanValue(%+v)", *p)
}

// Attributes:
//  - StringValue1
//  - StringValue2
type TStringStringValue struct {
	StringValue1 string  `thrift:"stringValue1,1" db:"stringValue1" json:"stringValue1"`
	StringValue2 *string `thrift:"stringValue2,2" db:"stringValue2" json:"stringValue2,omitempty"`
}

func NewTStringStringValue() *TStringStringValue {
	return &TStringStringValue{}
}

func (p *TStringStringValue) GetStringValue1() string {
	return p.StringValue1
}

var TStringStringValue_StringValue2_DEFAULT string

func (p *TStringStringValue) GetStringValue2() string {
	if !p.IsSetStringValue2() {
		return TStringStringValue_StringValue2_DEFAULT
	}
	return *p.StringValue2
}
func (p *TStringStringValue) IsSetStringValue2() bool {
	return p.StringValue2 != nil
}

func (p *TStringStringValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringStringValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StringValue1 = v
	}
	return nil
}

func (p *TStringStringValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StringValue2 = &v
	}
	return nil
}

func (p *TStringStringValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TStringStringValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringStringValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stringValue1", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stringValue1: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringValue1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stringValue1 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stringValue1: ", p), err)
	}
	return err
}

func (p *TStringStringValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue2() {
		if err := oprot.WriteFieldBegin("stringValue2", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue2: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stringValue2 (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue2: ", p), err)
		}
	}
	return err
}

func (p *TStringStringValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringStringValue(%+v)", *p)
}

// Attributes:
//  - StringValue
//  - BoolValue
//  - IntValue
//  - LongValue
//  - ShortValue
//  - DoubleValue
//  - BinaryValue
//  - ByteValue
//  - IntStringValue
//  - IntStringStringValue
//  - LongIntIntByteByteStringValue
//  - IntBooleanIntBooleanValue
//  - StringStringValue
type TAnnotationValue struct {
	StringValue                   *string                         `thrift:"stringValue,1" db:"stringValue" json:"stringValue,omitempty"`
	BoolValue                     *bool                           `thrift:"boolValue,2" db:"boolValue" json:"boolValue,omitempty"`
	IntValue                      *int32                          `thrift:"intValue,3" db:"intValue" json:"intValue,omitempty"`
	LongValue                     *int64                          `thrift:"longValue,4" db:"longValue" json:"longValue,omitempty"`
	ShortValue                    *int16                          `thrift:"shortValue,5" db:"shortValue" json:"shortValue,omitempty"`
	DoubleValue                   *float64                        `thrift:"doubleValue,6" db:"doubleValue" json:"doubleValue,omitempty"`
	BinaryValue                   []byte                          `thrift:"binaryValue,7" db:"binaryValue" json:"binaryValue,omitempty"`
	ByteValue                     *int8                           `thrift:"byteValue,8" db:"byteValue" json:"byteValue,omitempty"`
	IntStringValue                *TIntStringValue                `thrift:"intStringValue,9" db:"intStringValue" json:"intStringValue,omitempty"`
	IntStringStringValue          *TIntStringStringValue          `thrift:"intStringStringValue,10" db:"intStringStringValue" json:"intStringStringValue,omitempty"`
	LongIntIntByteByteStringValue *TLongIntIntByteByteStringValue `thrift:"longIntIntByteByteStringValue,11" db:"longIntIntByteByteStringValue" json:"longIntIntByteByteStringValue,omitempty"`
	IntBooleanIntBooleanValue     *TIntBooleanIntBooleanValue     `thrift:"intBooleanIntBooleanValue,12" db:"intBooleanIntBooleanValue" json:"intBooleanIntBooleanValue,omitempty"`
	StringStringValue             *TStringStringValue             `thrift:"stringStringValue,13" db:"stringStringValue" json:"stringStringValue,omitempty"`
}

func NewTAnnotationValue() *TAnnotationValue {
	return &TAnnotationValue{}
}

var TAnnotationValue_StringValue_DEFAULT string

func (p *TAnnotationValue) GetStringValue() string {
	if !p.IsSetStringValue() {
		return TAnnotationValue_StringValue_DEFAULT
	}
	return *p.StringValue
}

var TAnnotationValue_BoolValue_DEFAULT bool

func (p *TAnnotationValue) GetBoolValue() bool {
	if !p.IsSetBoolValue() {
		return TAnnotationValue_BoolValue_DEFAULT
	}
	return *p.BoolValue
}

var TAnnotationValue_IntValue_DEFAULT int32

func (p *TAnnotationValue) GetIntValue() int32 {
	if !p.IsSetIntValue() {
		return TAnnotationValue_IntValue_DEFAULT
	}
	return *p.IntValue
}

var TAnnotationValue_LongValue_DEFAULT int64

func (p *TAnnotationValue) GetLongValue() int64 {
	if !p.IsSetLongValue() {
		return TAnnotationValue_LongValue_DEFAULT
	}
	return *p.LongValue
}

var TAnnotationValue_ShortValue_DEFAULT int16

func (p *TAnnotationValue) GetShortValue() int16 {
	if !p.IsSetShortValue() {
		return TAnnotationValue_ShortValue_DEFAULT
	}
	return *p.ShortValue
}

var TAnnotationValue_DoubleValue_DEFAULT float64

func (p *TAnnotationValue) GetDoubleValue() float64 {
	if !p.IsSetDoubleValue() {
		return TAnnotationValue_DoubleValue_DEFAULT
	}
	return *p.DoubleValue
}

var TAnnotationValue_BinaryValue_DEFAULT []byte

func (p *TAnnotationValue) GetBinaryValue() []byte {
	return p.BinaryValue
}

var TAnnotationValue_ByteValue_DEFAULT int8

func (p *TAnnotationValue) GetByteValue() int8 {
	if !p.IsSetByteValue() {
		return TAnnotationValue_ByteValue_DEFAULT
	}
	return *p.ByteValue
}

var TAnnotationValue_IntStringValue_DEFAULT *TIntStringValue

func (p *TAnnotationValue) GetIntStringValue() *TIntStringValue {
	if !p.IsSetIntStringValue() {
		return TAnnotationValue_IntStringValue_DEFAULT
	}
	return p.IntStringValue
}

var TAnnotationValue_IntStringStringValue_DEFAULT *TIntStringStringValue

func (p *TAnnotationValue) GetIntStringStringValue() *TIntStringStringValue {
	if !p.IsSetIntStringStringValue() {
		return TAnnotationValue_IntStringStringValue_DEFAULT
	}
	return p.IntStringStringValue
}

var TAnnotationValue_LongIntIntByteByteStringValue_DEFAULT *TLongIntIntByteByteStringValue

func (p *TAnnotationValue) GetLongIntIntByteByteStringValue() *TLongIntIntByteByteStringValue {
	if !p.IsSetLongIntIntByteByteStringValue() {
		return TAnnotationValue_LongIntIntByteByteStringValue_DEFAULT
	}
	return p.LongIntIntByteByteStringValue
}

var TAnnotationValue_IntBooleanIntBooleanValue_DEFAULT *TIntBooleanIntBooleanValue

func (p *TAnnotationValue) GetIntBooleanIntBooleanValue() *TIntBooleanIntBooleanValue {
	if !p.IsSetIntBooleanIntBooleanValue() {
		return TAnnotationValue_IntBooleanIntBooleanValue_DEFAULT
	}
	return p.IntBooleanIntBooleanValue
}

var TAnnotationValue_StringStringValue_DEFAULT *TStringStringValue

func (p *TAnnotationValue) GetStringStringValue() *TStringStringValue {
	if !p.IsSetStringStringValue() {
		return TAnnotationValue_StringStringValue_DEFAULT
	}
	return p.StringStringValue
}
func (p *TAnnotationValue) CountSetFieldsTAnnotationValue() int {
	count := 0
	if p.IsSetStringValue() {
		count++
	}
	if p.IsSetBoolValue() {
		count++
	}
	if p.IsSetIntValue() {
		count++
	}
	if p.IsSetLongValue() {
		count++
	}
	if p.IsSetShortValue() {
		count++
	}
	if p.IsSetDoubleValue() {
		count++
	}
	if p.IsSetBinaryValue() {
		count++
	}
	if p.IsSetByteValue() {
		count++
	}
	if p.IsSetIntStringValue() {
		count++
	}
	if p.IsSetIntStringStringValue() {
		count++
	}
	if p.IsSetLongIntIntByteByteStringValue() {
		count++
	}
	if p.IsSetIntBooleanIntBooleanValue() {
		count++
	}
	if p.IsSetStringStringValue() {
		count++
	}
	return count

}

func (p *TAnnotationValue) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *TAnnotationValue) IsSetBoolValue() bool {
	return p.BoolValue != nil
}

func (p *TAnnotationValue) IsSetIntValue() bool {
	return p.IntValue != nil
}

func (p *TAnnotationValue) IsSetLongValue() bool {
	return p.LongValue != nil
}

func (p *TAnnotationValue) IsSetShortValue() bool {
	return p.ShortValue != nil
}

func (p *TAnnotationValue) IsSetDoubleValue() bool {
	return p.DoubleValue != nil
}

func (p *TAnnotationValue) IsSetBinaryValue() bool {
	return p.BinaryValue != nil
}

func (p *TAnnotationValue) IsSetByteValue() bool {
	return p.ByteValue != nil
}

func (p *TAnnotationValue) IsSetIntStringValue() bool {
	return p.IntStringValue != nil
}

func (p *TAnnotationValue) IsSetIntStringStringValue() bool {
	return p.IntStringStringValue != nil
}

func (p *TAnnotationValue) IsSetLongIntIntByteByteStringValue() bool {
	return p.LongIntIntByteByteStringValue != nil
}

func (p *TAnnotationValue) IsSetIntBooleanIntBooleanValue() bool {
	return p.IntBooleanIntBooleanValue != nil
}

func (p *TAnnotationValue) IsSetStringStringValue() bool {
	return p.StringStringValue != nil
}

func (p *TAnnotationValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAnnotationValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *TAnnotationValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BoolValue = &v
	}
	return nil
}

func (p *TAnnotationValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IntValue = &v
	}
	return nil
}

func (p *TAnnotationValue) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LongValue = &v
	}
	return nil
}

func (p *TAnnotationValue) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ShortValue = &v
	}
	return nil
}

func (p *TAnnotationValue) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DoubleValue = &v
	}
	return nil
}

func (p *TAnnotationValue) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BinaryValue = v
	}
	return nil
}

func (p *TAnnotationValue) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.ByteValue = &temp
	}
	return nil
}

func (p *TAnnotationValue) ReadField9(iprot thrift.TProtocol) error {
	p.IntStringValue = &TIntStringValue{}
	if err := p.IntStringValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntStringValue), err)
	}
	return nil
}

func (p *TAnnotationValue) ReadField10(iprot thrift.TProtocol) error {
	p.IntStringStringValue = &TIntStringStringValue{}
	if err := p.IntStringStringValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntStringStringValue), err)
	}
	return nil
}

func (p *TAnnotationValue) ReadField11(iprot thrift.TProtocol) error {
	p.LongIntIntByteByteStringValue = &TLongIntIntByteByteStringValue{}
	if err := p.LongIntIntByteByteStringValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LongIntIntByteByteStringValue), err)
	}
	return nil
}

func (p *TAnnotationValue) ReadField12(iprot thrift.TProtocol) error {
	p.IntBooleanIntBooleanValue = &TIntBooleanIntBooleanValue{}
	if err := p.IntBooleanIntBooleanValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntBooleanIntBooleanValue), err)
	}
	return nil
}

func (p *TAnnotationValue) ReadField13(iprot thrift.TProtocol) error {
	p.StringStringValue = &TStringStringValue{}
	if err := p.StringStringValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringStringValue), err)
	}
	return nil
}

func (p *TAnnotationValue) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsTAnnotationValue(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("TAnnotationValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAnnotationValue) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stringValue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stringValue (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stringValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolValue() {
		if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:boolValue: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.boolValue (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:boolValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntValue() {
		if err := oprot.WriteFieldBegin("intValue", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intValue: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IntValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.intValue (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongValue() {
		if err := oprot.WriteFieldBegin("longValue", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longValue: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LongValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.longValue (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortValue() {
		if err := oprot.WriteFieldBegin("shortValue", thrift.I16, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shortValue: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.ShortValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shortValue (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shortValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleValue() {
		if err := oprot.WriteFieldBegin("doubleValue", thrift.DOUBLE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:doubleValue: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.doubleValue (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:doubleValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinaryValue() {
		if err := oprot.WriteFieldBegin("binaryValue", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:binaryValue: ", p), err)
		}
		if err := oprot.WriteBinary(p.BinaryValue); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.binaryValue (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:binaryValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetByteValue() {
		if err := oprot.WriteFieldBegin("byteValue", thrift.BYTE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:byteValue: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ByteValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.byteValue (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:byteValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntStringValue() {
		if err := oprot.WriteFieldBegin("intStringValue", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:intStringValue: ", p), err)
		}
		if err := p.IntStringValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntStringValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:intStringValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntStringStringValue() {
		if err := oprot.WriteFieldBegin("intStringStringValue", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:intStringStringValue: ", p), err)
		}
		if err := p.IntStringStringValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntStringStringValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:intStringStringValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongIntIntByteByteStringValue() {
		if err := oprot.WriteFieldBegin("longIntIntByteByteStringValue", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:longIntIntByteByteStringValue: ", p), err)
		}
		if err := p.LongIntIntByteByteStringValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LongIntIntByteByteStringValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:longIntIntByteByteStringValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntBooleanIntBooleanValue() {
		if err := oprot.WriteFieldBegin("intBooleanIntBooleanValue", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:intBooleanIntBooleanValue: ", p), err)
		}
		if err := p.IntBooleanIntBooleanValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntBooleanIntBooleanValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:intBooleanIntBooleanValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringStringValue() {
		if err := oprot.WriteFieldBegin("stringStringValue", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:stringStringValue: ", p), err)
		}
		if err := p.StringStringValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringStringValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:stringStringValue: ", p), err)
		}
	}
	return err
}

func (p *TAnnotationValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAnnotationValue(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type TAnnotation struct {
	Key   int32             `thrift:"key,1" db:"key" json:"key"`
	Value *TAnnotationValue `thrift:"value,2" db:"value" json:"value,omitempty"`
}

func NewTAnnotation() *TAnnotation {
	return &TAnnotation{}
}

func (p *TAnnotation) GetKey() int32 {
	return p.Key
}

var TAnnotation_Value_DEFAULT *TAnnotationValue

func (p *TAnnotation) GetValue() *TAnnotationValue {
	if !p.IsSetValue() {
		return TAnnotation_Value_DEFAULT
	}
	return p.Value
}
func (p *TAnnotation) IsSetValue() bool {
	return p.Value != nil
}

func (p *TAnnotation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAnnotation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *TAnnotation) ReadField2(iprot thrift.TProtocol) error {
	p.Value = &TAnnotationValue{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *TAnnotation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAnnotation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAnnotation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TAnnotation) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
		}
		if err := p.Value.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
		}
	}
	return err
}

func (p *TAnnotation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAnnotation(%+v)", *p)
}

// Attributes:
//  - AsyncId
//  - Sequence
type TLocalAsyncId struct {
	AsyncId  int32 `thrift:"asyncId,1" db:"asyncId" json:"asyncId"`
	Sequence int32 `thrift:"sequence,2" db:"sequence" json:"sequence"`
}

func NewTLocalAsyncId() *TLocalAsyncId {
	return &TLocalAsyncId{}
}

func (p *TLocalAsyncId) GetAsyncId() int32 {
	return p.AsyncId
}

func (p *TLocalAsyncId) GetSequence() int32 {
	return p.Sequence
}
func (p *TLocalAsyncId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TLocalAsyncId) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AsyncId = v
	}
	return nil
}

func (p *TLocalAsyncId) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sequence = v
	}
	return nil
}

func (p *TLocalAsyncId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TLocalAsyncId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TLocalAsyncId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("asyncId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:asyncId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AsyncId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.asyncId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:asyncId: ", p), err)
	}
	return err
}

func (p *TLocalAsyncId) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequence", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sequence: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Sequence)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sequence (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sequence: ", p), err)
	}
	return err
}

func (p *TLocalAsyncId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLocalAsyncId(%+v)", *p)
}

// Attributes:
//  - SpanId
//  - Sequence
//  - StartElapsed
//  - EndElapsed
//  - RPC
//  - ServiceType
//  - EndPoint
//  - Annotations
//  - Depth
//  - NextSpanId
//  - DestinationId
//  - ApiId
//  - ExceptionInfo
//  - AsyncId
//  - NextAsyncId
//  - AsyncSequence
type TSpanEvent struct {
	// unused fields # 1 to 6
	SpanId       *int64         `thrift:"spanId,7" db:"spanId" json:"spanId,omitempty"`
	Sequence     int16          `thrift:"sequence,8" db:"sequence" json:"sequence"`
	StartElapsed int32          `thrift:"startElapsed,9" db:"startElapsed" json:"startElapsed"`
	EndElapsed   int32          `thrift:"endElapsed,10" db:"endElapsed" json:"endElapsed,omitempty"`
	RPC          *string        `thrift:"rpc,11" db:"rpc" json:"rpc,omitempty"`
	ServiceType  int16          `thrift:"serviceType,12" db:"serviceType" json:"serviceType"`
	EndPoint     *string        `thrift:"endPoint,13" db:"endPoint" json:"endPoint,omitempty"`
	Annotations  []*TAnnotation `thrift:"annotations,14" db:"annotations" json:"annotations,omitempty"`
	Depth        int32          `thrift:"depth,15" db:"depth" json:"depth,omitempty"`
	NextSpanId   int64          `thrift:"nextSpanId,16" db:"nextSpanId" json:"nextSpanId,omitempty"`
	// unused fields # 17 to 19
	DestinationId *string `thrift:"destinationId,20" db:"destinationId" json:"destinationId,omitempty"`
	// unused fields # 21 to 24
	ApiId         *int32           `thrift:"apiId,25" db:"apiId" json:"apiId,omitempty"`
	ExceptionInfo *TIntStringValue `thrift:"exceptionInfo,26" db:"exceptionInfo" json:"exceptionInfo,omitempty"`
	// unused fields # 27 to 29
	AsyncId       *int32 `thrift:"asyncId,30" db:"asyncId" json:"asyncId,omitempty"`
	NextAsyncId   *int32 `thrift:"nextAsyncId,31" db:"nextAsyncId" json:"nextAsyncId,omitempty"`
	AsyncSequence *int16 `thrift:"asyncSequence,32" db:"asyncSequence" json:"asyncSequence,omitempty"`
}

func NewTSpanEvent() *TSpanEvent {
	return &TSpanEvent{
		Depth: -1,

		NextSpanId: -1,
	}
}

var TSpanEvent_SpanId_DEFAULT int64

func (p *TSpanEvent) GetSpanId() int64 {
	if !p.IsSetSpanId() {
		return TSpanEvent_SpanId_DEFAULT
	}
	return *p.SpanId
}

func (p *TSpanEvent) GetSequence() int16 {
	return p.Sequence
}

func (p *TSpanEvent) GetStartElapsed() int32 {
	return p.StartElapsed
}

var TSpanEvent_EndElapsed_DEFAULT int32 = 0

func (p *TSpanEvent) GetEndElapsed() int32 {
	return p.EndElapsed
}

var TSpanEvent_RPC_DEFAULT string

func (p *TSpanEvent) GetRPC() string {
	if !p.IsSetRPC() {
		return TSpanEvent_RPC_DEFAULT
	}
	return *p.RPC
}

func (p *TSpanEvent) GetServiceType() int16 {
	return p.ServiceType
}

var TSpanEvent_EndPoint_DEFAULT string

func (p *TSpanEvent) GetEndPoint() string {
	if !p.IsSetEndPoint() {
		return TSpanEvent_EndPoint_DEFAULT
	}
	return *p.EndPoint
}

var TSpanEvent_Annotations_DEFAULT []*TAnnotation

func (p *TSpanEvent) GetAnnotations() []*TAnnotation {
	return p.Annotations
}

var TSpanEvent_Depth_DEFAULT int32 = -1

func (p *TSpanEvent) GetDepth() int32 {
	return p.Depth
}

var TSpanEvent_NextSpanId_DEFAULT int64 = -1

func (p *TSpanEvent) GetNextSpanId() int64 {
	return p.NextSpanId
}

var TSpanEvent_DestinationId_DEFAULT string

func (p *TSpanEvent) GetDestinationId() string {
	if !p.IsSetDestinationId() {
		return TSpanEvent_DestinationId_DEFAULT
	}
	return *p.DestinationId
}

var TSpanEvent_ApiId_DEFAULT int32

func (p *TSpanEvent) GetApiId() int32 {
	if !p.IsSetApiId() {
		return TSpanEvent_ApiId_DEFAULT
	}
	return *p.ApiId
}

var TSpanEvent_ExceptionInfo_DEFAULT *TIntStringValue

func (p *TSpanEvent) GetExceptionInfo() *TIntStringValue {
	if !p.IsSetExceptionInfo() {
		return TSpanEvent_ExceptionInfo_DEFAULT
	}
	return p.ExceptionInfo
}

var TSpanEvent_AsyncId_DEFAULT int32

func (p *TSpanEvent) GetAsyncId() int32 {
	if !p.IsSetAsyncId() {
		return TSpanEvent_AsyncId_DEFAULT
	}
	return *p.AsyncId
}

var TSpanEvent_NextAsyncId_DEFAULT int32

func (p *TSpanEvent) GetNextAsyncId() int32 {
	if !p.IsSetNextAsyncId() {
		return TSpanEvent_NextAsyncId_DEFAULT
	}
	return *p.NextAsyncId
}

var TSpanEvent_AsyncSequence_DEFAULT int16

func (p *TSpanEvent) GetAsyncSequence() int16 {
	if !p.IsSetAsyncSequence() {
		return TSpanEvent_AsyncSequence_DEFAULT
	}
	return *p.AsyncSequence
}
func (p *TSpanEvent) IsSetSpanId() bool {
	return p.SpanId != nil
}

func (p *TSpanEvent) IsSetEndElapsed() bool {
	return p.EndElapsed != TSpanEvent_EndElapsed_DEFAULT
}

func (p *TSpanEvent) IsSetRPC() bool {
	return p.RPC != nil
}

func (p *TSpanEvent) IsSetEndPoint() bool {
	return p.EndPoint != nil
}

func (p *TSpanEvent) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *TSpanEvent) IsSetDepth() bool {
	return p.Depth != TSpanEvent_Depth_DEFAULT
}

func (p *TSpanEvent) IsSetNextSpanId() bool {
	return p.NextSpanId != TSpanEvent_NextSpanId_DEFAULT
}

func (p *TSpanEvent) IsSetDestinationId() bool {
	return p.DestinationId != nil
}

func (p *TSpanEvent) IsSetApiId() bool {
	return p.ApiId != nil
}

func (p *TSpanEvent) IsSetExceptionInfo() bool {
	return p.ExceptionInfo != nil
}

func (p *TSpanEvent) IsSetAsyncId() bool {
	return p.AsyncId != nil
}

func (p *TSpanEvent) IsSetNextAsyncId() bool {
	return p.NextAsyncId != nil
}

func (p *TSpanEvent) IsSetAsyncSequence() bool {
	return p.AsyncSequence != nil
}

func (p *TSpanEvent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField26(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSpanEvent) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SpanId = &v
	}
	return nil
}

func (p *TSpanEvent) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Sequence = v
	}
	return nil
}

func (p *TSpanEvent) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.StartElapsed = v
	}
	return nil
}

func (p *TSpanEvent) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.EndElapsed = v
	}
	return nil
}

func (p *TSpanEvent) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.RPC = &v
	}
	return nil
}

func (p *TSpanEvent) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ServiceType = v
	}
	return nil
}

func (p *TSpanEvent) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.EndPoint = &v
	}
	return nil
}

func (p *TSpanEvent) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAnnotation, 0, size)
	p.Annotations = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TAnnotation{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Annotations = append(p.Annotations, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSpanEvent) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Depth = v
	}
	return nil
}

func (p *TSpanEvent) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.NextSpanId = v
	}
	return nil
}

func (p *TSpanEvent) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.DestinationId = &v
	}
	return nil
}

func (p *TSpanEvent) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.ApiId = &v
	}
	return nil
}

func (p *TSpanEvent) ReadField26(iprot thrift.TProtocol) error {
	p.ExceptionInfo = &TIntStringValue{}
	if err := p.ExceptionInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExceptionInfo), err)
	}
	return nil
}

func (p *TSpanEvent) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.AsyncId = &v
	}
	return nil
}

func (p *TSpanEvent) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.NextAsyncId = &v
	}
	return nil
}

func (p *TSpanEvent) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.AsyncSequence = &v
	}
	return nil
}

func (p *TSpanEvent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSpanEvent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSpanEvent) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanId() {
		if err := oprot.WriteFieldBegin("spanId", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spanId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SpanId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.spanId (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spanId: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequence", thrift.I16, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sequence: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Sequence)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sequence (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sequence: ", p), err)
	}
	return err
}

func (p *TSpanEvent) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startElapsed", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startElapsed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartElapsed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startElapsed (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startElapsed: ", p), err)
	}
	return err
}

func (p *TSpanEvent) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndElapsed() {
		if err := oprot.WriteFieldBegin("endElapsed", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endElapsed: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.EndElapsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endElapsed (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endElapsed: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRPC() {
		if err := oprot.WriteFieldBegin("rpc", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:rpc: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RPC)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.rpc (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:rpc: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceType", thrift.I16, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serviceType: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ServiceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceType (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serviceType: ", p), err)
	}
	return err
}

func (p *TSpanEvent) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndPoint() {
		if err := oprot.WriteFieldBegin("endPoint", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:endPoint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EndPoint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endPoint (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:endPoint: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:annotations: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:annotations: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetDepth() {
		if err := oprot.WriteFieldBegin("depth", thrift.I32, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:depth: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.Depth)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.depth (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:depth: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextSpanId() {
		if err := oprot.WriteFieldBegin("nextSpanId", thrift.I64, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:nextSpanId: ", p), err)
		}
		if err := oprot.WriteI64(int64(p.NextSpanId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextSpanId (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:nextSpanId: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestinationId() {
		if err := oprot.WriteFieldBegin("destinationId", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:destinationId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DestinationId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destinationId (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:destinationId: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiId() {
		if err := oprot.WriteFieldBegin("apiId", thrift.I32, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:apiId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ApiId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.apiId (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:apiId: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetExceptionInfo() {
		if err := oprot.WriteFieldBegin("exceptionInfo", thrift.STRUCT, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:exceptionInfo: ", p), err)
		}
		if err := p.ExceptionInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExceptionInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:exceptionInfo: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetAsyncId() {
		if err := oprot.WriteFieldBegin("asyncId", thrift.I32, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:asyncId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AsyncId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.asyncId (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:asyncId: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextAsyncId() {
		if err := oprot.WriteFieldBegin("nextAsyncId", thrift.I32, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:nextAsyncId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NextAsyncId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextAsyncId (31) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:nextAsyncId: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetAsyncSequence() {
		if err := oprot.WriteFieldBegin("asyncSequence", thrift.I16, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:asyncSequence: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.AsyncSequence)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.asyncSequence (32) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:asyncSequence: ", p), err)
		}
	}
	return err
}

func (p *TSpanEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSpanEvent(%+v)", *p)
}

// Attributes:
//  - AgentId
//  - ApplicationName
//  - AgentStartTime
//  - TransactionId
//  - SpanId
//  - ParentSpanId
//  - StartTime
//  - Elapsed
//  - RPC
//  - ServiceType
//  - EndPoint
//  - RemoteAddr
//  - Annotations
//  - Flag
//  - Err
//  - SpanEventList
//  - ParentApplicationName
//  - ParentApplicationType
//  - AcceptorHost
//  - ApiId
//  - ExceptionInfo
//  - ApplicationServiceType
//  - LoggingTransactionInfo
//  - Version
type TSpan struct {
	AgentId         string `thrift:"agentId,1" db:"agentId" json:"agentId"`
	ApplicationName string `thrift:"applicationName,2" db:"applicationName" json:"applicationName"`
	AgentStartTime  int64  `thrift:"agentStartTime,3" db:"agentStartTime" json:"agentStartTime"`
	TransactionId   []byte `thrift:"transactionId,4" db:"transactionId" json:"transactionId"`
	// unused fields # 5 to 6
	SpanId                int64          `thrift:"spanId,7" db:"spanId" json:"spanId"`
	ParentSpanId          int64          `thrift:"parentSpanId,8" db:"parentSpanId" json:"parentSpanId,omitempty"`
	StartTime             int64          `thrift:"startTime,9" db:"startTime" json:"startTime"`
	Elapsed               int32          `thrift:"elapsed,10" db:"elapsed" json:"elapsed,omitempty"`
	RPC                   *string        `thrift:"rpc,11" db:"rpc" json:"rpc,omitempty"`
	ServiceType           int16          `thrift:"serviceType,12" db:"serviceType" json:"serviceType"`
	EndPoint              *string        `thrift:"endPoint,13" db:"endPoint" json:"endPoint,omitempty"`
	RemoteAddr            *string        `thrift:"remoteAddr,14" db:"remoteAddr" json:"remoteAddr,omitempty"`
	Annotations           []*TAnnotation `thrift:"annotations,15" db:"annotations" json:"annotations,omitempty"`
	Flag                  int16          `thrift:"flag,16" db:"flag" json:"flag,omitempty"`
	Err                   *int32         `thrift:"err,17" db:"err" json:"err,omitempty"`
	SpanEventList         []*TSpanEvent  `thrift:"spanEventList,18" db:"spanEventList" json:"spanEventList,omitempty"`
	ParentApplicationName *string        `thrift:"parentApplicationName,19" db:"parentApplicationName" json:"parentApplicationName,omitempty"`
	ParentApplicationType *int16         `thrift:"parentApplicationType,20" db:"parentApplicationType" json:"parentApplicationType,omitempty"`
	AcceptorHost          *string        `thrift:"acceptorHost,21" db:"acceptorHost" json:"acceptorHost,omitempty"`
	// unused fields # 22 to 24
	ApiId         *int32           `thrift:"apiId,25" db:"apiId" json:"apiId,omitempty"`
	ExceptionInfo *TIntStringValue `thrift:"exceptionInfo,26" db:"exceptionInfo" json:"exceptionInfo,omitempty"`
	// unused fields # 27 to 29
	ApplicationServiceType *int16 `thrift:"applicationServiceType,30" db:"applicationServiceType" json:"applicationServiceType,omitempty"`
	LoggingTransactionInfo *int8  `thrift:"loggingTransactionInfo,31" db:"loggingTransactionInfo" json:"loggingTransactionInfo,omitempty"`
	Version                int8   `thrift:"version,32" db:"version" json:"version,omitempty"`
}

func NewTSpan() *TSpan {
	return &TSpan{
		ParentSpanId: -1,

		Version: 1,
	}
}

func (p *TSpan) GetAgentId() string {
	return p.AgentId
}

func (p *TSpan) GetApplicationName() string {
	return p.ApplicationName
}

func (p *TSpan) GetAgentStartTime() int64 {
	return p.AgentStartTime
}

func (p *TSpan) GetTransactionId() []byte {
	return p.TransactionId
}

func (p *TSpan) GetSpanId() int64 {
	return p.SpanId
}

var TSpan_ParentSpanId_DEFAULT int64 = -1

func (p *TSpan) GetParentSpanId() int64 {
	return p.ParentSpanId
}

func (p *TSpan) GetStartTime() int64 {
	return p.StartTime
}

var TSpan_Elapsed_DEFAULT int32 = 0

func (p *TSpan) GetElapsed() int32 {
	return p.Elapsed
}

var TSpan_RPC_DEFAULT string

func (p *TSpan) GetRPC() string {
	if !p.IsSetRPC() {
		return TSpan_RPC_DEFAULT
	}
	return *p.RPC
}

func (p *TSpan) GetServiceType() int16 {
	return p.ServiceType
}

var TSpan_EndPoint_DEFAULT string

func (p *TSpan) GetEndPoint() string {
	if !p.IsSetEndPoint() {
		return TSpan_EndPoint_DEFAULT
	}
	return *p.EndPoint
}

var TSpan_RemoteAddr_DEFAULT string

func (p *TSpan) GetRemoteAddr() string {
	if !p.IsSetRemoteAddr() {
		return TSpan_RemoteAddr_DEFAULT
	}
	return *p.RemoteAddr
}

var TSpan_Annotations_DEFAULT []*TAnnotation

func (p *TSpan) GetAnnotations() []*TAnnotation {
	return p.Annotations
}

var TSpan_Flag_DEFAULT int16 = 0

func (p *TSpan) GetFlag() int16 {
	return p.Flag
}

var TSpan_Err_DEFAULT int32

func (p *TSpan) GetErr() int32 {
	if !p.IsSetErr() {
		return TSpan_Err_DEFAULT
	}
	return *p.Err
}

var TSpan_SpanEventList_DEFAULT []*TSpanEvent

func (p *TSpan) GetSpanEventList() []*TSpanEvent {
	return p.SpanEventList
}

var TSpan_ParentApplicationName_DEFAULT string

func (p *TSpan) GetParentApplicationName() string {
	if !p.IsSetParentApplicationName() {
		return TSpan_ParentApplicationName_DEFAULT
	}
	return *p.ParentApplicationName
}

var TSpan_ParentApplicationType_DEFAULT int16

func (p *TSpan) GetParentApplicationType() int16 {
	if !p.IsSetParentApplicationType() {
		return TSpan_ParentApplicationType_DEFAULT
	}
	return *p.ParentApplicationType
}

var TSpan_AcceptorHost_DEFAULT string

func (p *TSpan) GetAcceptorHost() string {
	if !p.IsSetAcceptorHost() {
		return TSpan_AcceptorHost_DEFAULT
	}
	return *p.AcceptorHost
}

var TSpan_ApiId_DEFAULT int32

func (p *TSpan) GetApiId() int32 {
	if !p.IsSetApiId() {
		return TSpan_ApiId_DEFAULT
	}
	return *p.ApiId
}

var TSpan_ExceptionInfo_DEFAULT *TIntStringValue

func (p *TSpan) GetExceptionInfo() *TIntStringValue {
	if !p.IsSetExceptionInfo() {
		return TSpan_ExceptionInfo_DEFAULT
	}
	return p.ExceptionInfo
}

var TSpan_ApplicationServiceType_DEFAULT int16

func (p *TSpan) GetApplicationServiceType() int16 {
	if !p.IsSetApplicationServiceType() {
		return TSpan_ApplicationServiceType_DEFAULT
	}
	return *p.ApplicationServiceType
}

var TSpan_LoggingTransactionInfo_DEFAULT int8

func (p *TSpan) GetLoggingTransactionInfo() int8 {
	if !p.IsSetLoggingTransactionInfo() {
		return TSpan_LoggingTransactionInfo_DEFAULT
	}
	return *p.LoggingTransactionInfo
}

var TSpan_Version_DEFAULT int8 = 1

func (p *TSpan) GetVersion() int8 {
	return p.Version
}
func (p *TSpan) IsSetParentSpanId() bool {
	return p.ParentSpanId != TSpan_ParentSpanId_DEFAULT
}

func (p *TSpan) IsSetElapsed() bool {
	return p.Elapsed != TSpan_Elapsed_DEFAULT
}

func (p *TSpan) IsSetRPC() bool {
	return p.RPC != nil
}

func (p *TSpan) IsSetEndPoint() bool {
	return p.EndPoint != nil
}

func (p *TSpan) IsSetRemoteAddr() bool {
	return p.RemoteAddr != nil
}

func (p *TSpan) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *TSpan) IsSetFlag() bool {
	return p.Flag != TSpan_Flag_DEFAULT
}

func (p *TSpan) IsSetErr() bool {
	return p.Err != nil
}

func (p *TSpan) IsSetSpanEventList() bool {
	return p.SpanEventList != nil
}

func (p *TSpan) IsSetParentApplicationName() bool {
	return p.ParentApplicationName != nil
}

func (p *TSpan) IsSetParentApplicationType() bool {
	return p.ParentApplicationType != nil
}

func (p *TSpan) IsSetAcceptorHost() bool {
	return p.AcceptorHost != nil
}

func (p *TSpan) IsSetApiId() bool {
	return p.ApiId != nil
}

func (p *TSpan) IsSetExceptionInfo() bool {
	return p.ExceptionInfo != nil
}

func (p *TSpan) IsSetApplicationServiceType() bool {
	return p.ApplicationServiceType != nil
}

func (p *TSpan) IsSetLoggingTransactionInfo() bool {
	return p.LoggingTransactionInfo != nil
}

func (p *TSpan) IsSetVersion() bool {
	return p.Version != TSpan_Version_DEFAULT
}

func (p *TSpan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField26(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSpan) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TSpan) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ApplicationName = v
	}
	return nil
}

func (p *TSpan) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AgentStartTime = v
	}
	return nil
}

func (p *TSpan) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TransactionId = v
	}
	return nil
}

func (p *TSpan) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SpanId = v
	}
	return nil
}

func (p *TSpan) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ParentSpanId = v
	}
	return nil
}

func (p *TSpan) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TSpan) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Elapsed = v
	}
	return nil
}

func (p *TSpan) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.RPC = &v
	}
	return nil
}

func (p *TSpan) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ServiceType = v
	}
	return nil
}

func (p *TSpan) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.EndPoint = &v
	}
	return nil
}

func (p *TSpan) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.RemoteAddr = &v
	}
	return nil
}

func (p *TSpan) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAnnotation, 0, size)
	p.Annotations = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TAnnotation{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Annotations = append(p.Annotations, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSpan) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Flag = v
	}
	return nil
}

func (p *TSpan) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Err = &v
	}
	return nil
}

func (p *TSpan) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TSpanEvent, 0, size)
	p.SpanEventList = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &TSpanEvent{
			Depth: -1,

			NextSpanId: -1,
		}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.SpanEventList = append(p.SpanEventList, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSpan) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.ParentApplicationName = &v
	}
	return nil
}

func (p *TSpan) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.ParentApplicationType = &v
	}
	return nil
}

func (p *TSpan) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.AcceptorHost = &v
	}
	return nil
}

func (p *TSpan) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.ApiId = &v
	}
	return nil
}

func (p *TSpan) ReadField26(iprot thrift.TProtocol) error {
	p.ExceptionInfo = &TIntStringValue{}
	if err := p.ExceptionInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExceptionInfo), err)
	}
	return nil
}

func (p *TSpan) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ApplicationServiceType = &v
	}
	return nil
}

func (p *TSpan) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		temp := int8(v)
		p.LoggingTransactionInfo = &temp
	}
	return nil
}

func (p *TSpan) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		temp := int8(v)
		p.Version = temp
	}
	return nil
}

func (p *TSpan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSpan"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSpan) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err)
	}
	return err
}

func (p *TSpan) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationName: ", p), err)
	}
	return err
}

func (p *TSpan) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentStartTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agentStartTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgentStartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agentStartTime: ", p), err)
	}
	return err
}

func (p *TSpan) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transactionId: ", p), err)
	}
	if err := oprot.WriteBinary(p.TransactionId); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transactionId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transactionId: ", p), err)
	}
	return err
}

func (p *TSpan) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spanId", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spanId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SpanId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spanId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spanId: ", p), err)
	}
	return err
}

func (p *TSpan) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentSpanId() {
		if err := oprot.WriteFieldBegin("parentSpanId", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:parentSpanId: ", p), err)
		}
		if err := oprot.WriteI64(int64(p.ParentSpanId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.parentSpanId (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:parentSpanId: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err)
	}
	return err
}

func (p *TSpan) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetElapsed() {
		if err := oprot.WriteFieldBegin("elapsed", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:elapsed: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.Elapsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.elapsed (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:elapsed: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRPC() {
		if err := oprot.WriteFieldBegin("rpc", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:rpc: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RPC)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.rpc (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:rpc: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceType", thrift.I16, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serviceType: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ServiceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceType (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serviceType: ", p), err)
	}
	return err
}

func (p *TSpan) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndPoint() {
		if err := oprot.WriteFieldBegin("endPoint", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:endPoint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EndPoint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endPoint (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:endPoint: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteAddr() {
		if err := oprot.WriteFieldBegin("remoteAddr", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:remoteAddr: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RemoteAddr)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remoteAddr (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:remoteAddr: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:annotations: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:annotations: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetFlag() {
		if err := oprot.WriteFieldBegin("flag", thrift.I16, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:flag: ", p), err)
		}
		if err := oprot.WriteI16(int16(p.Flag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.flag (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:flag: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.I32, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:err: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Err)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.err (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:err: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanEventList() {
		if err := oprot.WriteFieldBegin("spanEventList", thrift.LIST, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:spanEventList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpanEventList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SpanEventList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:spanEventList: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentApplicationName() {
		if err := oprot.WriteFieldBegin("parentApplicationName", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:parentApplicationName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ParentApplicationName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.parentApplicationName (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:parentApplicationName: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentApplicationType() {
		if err := oprot.WriteFieldBegin("parentApplicationType", thrift.I16, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:parentApplicationType: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.ParentApplicationType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.parentApplicationType (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:parentApplicationType: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetAcceptorHost() {
		if err := oprot.WriteFieldBegin("acceptorHost", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:acceptorHost: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AcceptorHost)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.acceptorHost (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:acceptorHost: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiId() {
		if err := oprot.WriteFieldBegin("apiId", thrift.I32, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:apiId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ApiId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.apiId (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:apiId: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetExceptionInfo() {
		if err := oprot.WriteFieldBegin("exceptionInfo", thrift.STRUCT, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:exceptionInfo: ", p), err)
		}
		if err := p.ExceptionInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExceptionInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:exceptionInfo: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplicationServiceType() {
		if err := oprot.WriteFieldBegin("applicationServiceType", thrift.I16, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:applicationServiceType: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.ApplicationServiceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.applicationServiceType (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:applicationServiceType: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoggingTransactionInfo() {
		if err := oprot.WriteFieldBegin("loggingTransactionInfo", thrift.BYTE, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:loggingTransactionInfo: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.LoggingTransactionInfo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.loggingTransactionInfo (31) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:loggingTransactionInfo: ", p), err)
		}
	}
	return err
}

func (p *TSpan) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.BYTE, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:version: ", p), err)
		}
		if err := oprot.WriteByte(int8(p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (32) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:version: ", p), err)
		}
	}
	return err
}

func (p *TSpan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSpan(%+v)", *p)
}

// Attributes:
//  - AgentId
//  - ApplicationName
//  - AgentStartTime
//  - ServiceType
//  - TransactionId
//  - SpanId
//  - EndPoint
//  - SpanEventList
//  - ApplicationServiceType
//  - KeyTime
//  - Version
//  - LocalAsyncId
type TSpanChunk struct {
	AgentId         string `thrift:"agentId,1" db:"agentId" json:"agentId"`
	ApplicationName string `thrift:"applicationName,2" db:"applicationName" json:"applicationName"`
	AgentStartTime  int64  `thrift:"agentStartTime,3" db:"agentStartTime" json:"agentStartTime"`
	ServiceType     int16  `thrift:"serviceType,4" db:"serviceType" json:"serviceType"`
	TransactionId   []byte `thrift:"transactionId,5" db:"transactionId" json:"transactionId"`
	// unused fields # 6 to 7
	SpanId                 int64          `thrift:"spanId,8" db:"spanId" json:"spanId"`
	EndPoint               *string        `thrift:"endPoint,9" db:"endPoint" json:"endPoint,omitempty"`
	SpanEventList          []*TSpanEvent  `thrift:"spanEventList,10" db:"spanEventList" json:"spanEventList"`
	ApplicationServiceType *int16         `thrift:"applicationServiceType,11" db:"applicationServiceType" json:"applicationServiceType,omitempty"`
	KeyTime                *int64         `thrift:"keyTime,12" db:"keyTime" json:"keyTime,omitempty"`
	Version                int8           `thrift:"version,13" db:"version" json:"version,omitempty"`
	LocalAsyncId           *TLocalAsyncId `thrift:"localAsyncId,14" db:"localAsyncId" json:"localAsyncId,omitempty"`
}

func NewTSpanChunk() *TSpanChunk {
	return &TSpanChunk{
		Version: 1,
	}
}

func (p *TSpanChunk) GetAgentId() string {
	return p.AgentId
}

func (p *TSpanChunk) GetApplicationName() string {
	return p.ApplicationName
}

func (p *TSpanChunk) GetAgentStartTime() int64 {
	return p.AgentStartTime
}

func (p *TSpanChunk) GetServiceType() int16 {
	return p.ServiceType
}

func (p *TSpanChunk) GetTransactionId() []byte {
	return p.TransactionId
}

func (p *TSpanChunk) GetSpanId() int64 {
	return p.SpanId
}

var TSpanChunk_EndPoint_DEFAULT string

func (p *TSpanChunk) GetEndPoint() string {
	if !p.IsSetEndPoint() {
		return TSpanChunk_EndPoint_DEFAULT
	}
	return *p.EndPoint
}

func (p *TSpanChunk) GetSpanEventList() []*TSpanEvent {
	return p.SpanEventList
}

var TSpanChunk_ApplicationServiceType_DEFAULT int16

func (p *TSpanChunk) GetApplicationServiceType() int16 {
	if !p.IsSetApplicationServiceType() {
		return TSpanChunk_ApplicationServiceType_DEFAULT
	}
	return *p.ApplicationServiceType
}

var TSpanChunk_KeyTime_DEFAULT int64

func (p *TSpanChunk) GetKeyTime() int64 {
	if !p.IsSetKeyTime() {
		return TSpanChunk_KeyTime_DEFAULT
	}
	return *p.KeyTime
}

var TSpanChunk_Version_DEFAULT int8 = 1

func (p *TSpanChunk) GetVersion() int8 {
	return p.Version
}

var TSpanChunk_LocalAsyncId_DEFAULT *TLocalAsyncId

func (p *TSpanChunk) GetLocalAsyncId() *TLocalAsyncId {
	if !p.IsSetLocalAsyncId() {
		return TSpanChunk_LocalAsyncId_DEFAULT
	}
	return p.LocalAsyncId
}
func (p *TSpanChunk) IsSetEndPoint() bool {
	return p.EndPoint != nil
}

func (p *TSpanChunk) IsSetApplicationServiceType() bool {
	return p.ApplicationServiceType != nil
}

func (p *TSpanChunk) IsSetKeyTime() bool {
	return p.KeyTime != nil
}

func (p *TSpanChunk) IsSetVersion() bool {
	return p.Version != TSpanChunk_Version_DEFAULT
}

func (p *TSpanChunk) IsSetLocalAsyncId() bool {
	return p.LocalAsyncId != nil
}

func (p *TSpanChunk) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSpanChunk) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TSpanChunk) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ApplicationName = v
	}
	return nil
}

func (p *TSpanChunk) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AgentStartTime = v
	}
	return nil
}

func (p *TSpanChunk) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ServiceType = v
	}
	return nil
}

func (p *TSpanChunk) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TransactionId = v
	}
	return nil
}

func (p *TSpanChunk) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SpanId = v
	}
	return nil
}

func (p *TSpanChunk) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.EndPoint = &v
	}
	return nil
}

func (p *TSpanChunk) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TSpanEvent, 0, size)
	p.SpanEventList = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TSpanEvent{
			Depth: -1,

			NextSpanId: -1,
		}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.SpanEventList = append(p.SpanEventList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSpanChunk) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ApplicationServiceType = &v
	}
	return nil
}

func (p *TSpanChunk) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.KeyTime = &v
	}
	return nil
}

func (p *TSpanChunk) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p.Version = temp
	}
	return nil
}

func (p *TSpanChunk) ReadField14(iprot thrift.TProtocol) error {
	p.LocalAsyncId = &TLocalAsyncId{}
	if err := p.LocalAsyncId.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalAsyncId), err)
	}
	return nil
}

func (p *TSpanChunk) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSpanChunk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSpanChunk) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err)
	}
	return err
}

func (p *TSpanChunk) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationName: ", p), err)
	}
	return err
}

func (p *TSpanChunk) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentStartTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agentStartTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgentStartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agentStartTime: ", p), err)
	}
	return err
}

func (p *TSpanChunk) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceType", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceType: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ServiceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceType: ", p), err)
	}
	return err
}

func (p *TSpanChunk) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transactionId: ", p), err)
	}
	if err := oprot.WriteBinary(p.TransactionId); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transactionId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transactionId: ", p), err)
	}
	return err
}

func (p *TSpanChunk) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spanId", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:spanId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SpanId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spanId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:spanId: ", p), err)
	}
	return err
}

func (p *TSpanChunk) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndPoint() {
		if err := oprot.WriteFieldBegin("endPoint", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:endPoint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EndPoint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endPoint (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:endPoint: ", p), err)
		}
	}
	return err
}

func (p *TSpanChunk) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spanEventList", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:spanEventList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpanEventList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SpanEventList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:spanEventList: ", p), err)
	}
	return err
}

func (p *TSpanChunk) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplicationServiceType() {
		if err := oprot.WriteFieldBegin("applicationServiceType", thrift.I16, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:applicationServiceType: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.ApplicationServiceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.applicationServiceType (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:applicationServiceType: ", p), err)
		}
	}
	return err
}

func (p *TSpanChunk) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyTime() {
		if err := oprot.WriteFieldBegin("keyTime", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:keyTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.KeyTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.keyTime (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:keyTime: ", p), err)
		}
	}
	return err
}

func (p *TSpanChunk) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.BYTE, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:version: ", p), err)
		}
		if err := oprot.WriteByte(int8(p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:version: ", p), err)
		}
	}
	return err
}

func (p *TSpanChunk) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalAsyncId() {
		if err := oprot.WriteFieldBegin("localAsyncId", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:localAsyncId: ", p), err)
		}
		if err := p.LocalAsyncId.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalAsyncId), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:localAsyncId: ", p), err)
		}
	}
	return err
}

func (p *TSpanChunk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSpanChunk(%+v)", *p)
}

// Attributes:
//  - AgentId
//  - AgentStartTime
//  - StringId
//  - StringValue
type TStringMetaData struct {
	AgentId        string `thrift:"agentId,1" db:"agentId" json:"agentId"`
	AgentStartTime int64  `thrift:"agentStartTime,2" db:"agentStartTime" json:"agentStartTime"`
	// unused field # 3
	StringId    int32  `thrift:"stringId,4" db:"stringId" json:"stringId"`
	StringValue string `thrift:"stringValue,5" db:"stringValue" json:"stringValue"`
}

func NewTStringMetaData() *TStringMetaData {
	return &TStringMetaData{}
}

func (p *TStringMetaData) GetAgentId() string {
	return p.AgentId
}

func (p *TStringMetaData) GetAgentStartTime() int64 {
	return p.AgentStartTime
}

func (p *TStringMetaData) GetStringId() int32 {
	return p.StringId
}

func (p *TStringMetaData) GetStringValue() string {
	return p.StringValue
}
func (p *TStringMetaData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringMetaData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TStringMetaData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AgentStartTime = v
	}
	return nil
}

func (p *TStringMetaData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StringId = v
	}
	return nil
}

func (p *TStringMetaData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StringValue = v
	}
	return nil
}

func (p *TStringMetaData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TStringMetaData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringMetaData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err)
	}
	return err
}

func (p *TStringMetaData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentStartTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentStartTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgentStartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentStartTime: ", p), err)
	}
	return err
}

func (p *TStringMetaData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stringId", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StringId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stringId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringId: ", p), err)
	}
	return err
}

func (p *TStringMetaData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stringValue: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stringValue (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stringValue: ", p), err)
	}
	return err
}

func (p *TStringMetaData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringMetaData(%+v)", *p)
}

// Attributes:
//  - AgentId
//  - AgentStartTime
//  - SqlId
//  - Sql
type TSqlMetaData struct {
	AgentId        string `thrift:"agentId,1" db:"agentId" json:"agentId"`
	AgentStartTime int64  `thrift:"agentStartTime,2" db:"agentStartTime" json:"agentStartTime"`
	// unused field # 3
	SqlId int32  `thrift:"sqlId,4" db:"sqlId" json:"sqlId"`
	Sql   string `thrift:"sql,5" db:"sql" json:"sql"`
}

func NewTSqlMetaData() *TSqlMetaData {
	return &TSqlMetaData{}
}

func (p *TSqlMetaData) GetAgentId() string {
	return p.AgentId
}

func (p *TSqlMetaData) GetAgentStartTime() int64 {
	return p.AgentStartTime
}

func (p *TSqlMetaData) GetSqlId() int32 {
	return p.SqlId
}

func (p *TSqlMetaData) GetSql() string {
	return p.Sql
}
func (p *TSqlMetaData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSqlMetaData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TSqlMetaData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AgentStartTime = v
	}
	return nil
}

func (p *TSqlMetaData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SqlId = v
	}
	return nil
}

func (p *TSqlMetaData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Sql = v
	}
	return nil
}

func (p *TSqlMetaData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSqlMetaData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSqlMetaData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err)
	}
	return err
}

func (p *TSqlMetaData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentStartTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentStartTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgentStartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentStartTime: ", p), err)
	}
	return err
}

func (p *TSqlMetaData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sqlId", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sqlId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SqlId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sqlId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sqlId: ", p), err)
	}
	return err
}

func (p *TSqlMetaData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sql", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sql: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sql: ", p), err)
	}
	return err
}

func (p *TSqlMetaData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSqlMetaData(%+v)", *p)
}

// Attributes:
//  - AgentId
//  - AgentStartTime
//  - ApiId
//  - ApiInfo
//  - Line
//  - Type
type TApiMetaData struct {
	AgentId        string `thrift:"agentId,1" db:"agentId" json:"agentId"`
	AgentStartTime int64  `thrift:"agentStartTime,2" db:"agentStartTime" json:"agentStartTime"`
	// unused field # 3
	ApiId   int32  `thrift:"apiId,4" db:"apiId" json:"apiId"`
	ApiInfo string `thrift:"apiInfo,5" db:"apiInfo" json:"apiInfo"`
	Line    *int32 `thrift:"line,6" db:"line" json:"line,omitempty"`
	// unused fields # 7 to 9
	Type *int32 `thrift:"type,10" db:"type" json:"type,omitempty"`
}

func NewTApiMetaData() *TApiMetaData {
	return &TApiMetaData{}
}

func (p *TApiMetaData) GetAgentId() string {
	return p.AgentId
}

func (p *TApiMetaData) GetAgentStartTime() int64 {
	return p.AgentStartTime
}

func (p *TApiMetaData) GetApiId() int32 {
	return p.ApiId
}

func (p *TApiMetaData) GetApiInfo() string {
	return p.ApiInfo
}

var TApiMetaData_Line_DEFAULT int32

func (p *TApiMetaData) GetLine() int32 {
	if !p.IsSetLine() {
		return TApiMetaData_Line_DEFAULT
	}
	return *p.Line
}

var TApiMetaData_Type_DEFAULT int32

func (p *TApiMetaData) GetType() int32 {
	if !p.IsSetType() {
		return TApiMetaData_Type_DEFAULT
	}
	return *p.Type
}
func (p *TApiMetaData) IsSetLine() bool {
	return p.Line != nil
}

func (p *TApiMetaData) IsSetType() bool {
	return p.Type != nil
}

func (p *TApiMetaData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TApiMetaData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TApiMetaData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AgentStartTime = v
	}
	return nil
}

func (p *TApiMetaData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ApiId = v
	}
	return nil
}

func (p *TApiMetaData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ApiInfo = v
	}
	return nil
}

func (p *TApiMetaData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Line = &v
	}
	return nil
}

func (p *TApiMetaData) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *TApiMetaData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TApiMetaData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TApiMetaData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err)
	}
	return err
}

func (p *TApiMetaData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentStartTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentStartTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AgentStartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentStartTime: ", p), err)
	}
	return err
}

func (p *TApiMetaData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiId", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:apiId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ApiId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.apiId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:apiId: ", p), err)
	}
	return err
}

func (p *TApiMetaData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiInfo", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:apiInfo: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.apiInfo (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:apiInfo: ", p), err)
	}
	return err
}

func (p *TApiMetaData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLine() {
		if err := oprot.WriteFieldBegin("line", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:line: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Line)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.line (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:line: ", p), err)
		}
	}
	return err
}

func (p *TApiMetaData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err)
		}
	}
	return err
}

func (p *TApiMetaData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TApiMetaData(%+v)", *p)
}

// Attributes:
//  - Success
//  - Message
type TResult_ struct {
	Success bool    `thrift:"success,1" db:"success" json:"success"`
	Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
}

func NewTResult_() *TResult_ {
	return &TResult_{}
}

func (p *TResult_) GetSuccess() bool {
	return p.Success
}

var TResult__Message_DEFAULT string

func (p *TResult_) GetMessage() string {
	if !p.IsSetMessage() {
		return TResult__Message_DEFAULT
	}
	return *p.Message
}
func (p *TResult_) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *TResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *TResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *TResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResult_(%+v)", *p)
}
